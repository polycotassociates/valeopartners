<?php
/*
 *  (c) Ilya V. Azarov(azarov@Insourcing.ru), Andy Postnikov, andypost@drupal.org
 *  This module need a patch into common.inc to eat timezone correct!
 *  WARNING: PHP 5 only.
 */
// $Id: dst.module,v 1.7 2011/02/24 13:28:56 ilya1st Exp $

//define('DST_PATH', drupal_get_path('module', 'dst'));

/**
 * Implementation of hook_help()
 *
 */
function dst_help($section) {
  switch ($section) {
    case 'admin/help#dst':
      $output = '<p>'. t('Daylight Savings Time') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu()
 *
 */
function dst_menu() {
  $items = array();
  $items['admin/settings/dst'] = array(
    'title' => t('DST'),
    'description' => t('Daylight Savings Time'),
    'page callback' => 'dst_admin_page',
    'access arguments' => array('administer dst'),
  );
  return $items;
}

function dst_admin_page(){
    return drupal_get_form('dst_system_settings');
}
/**
 * Implementation of hook_perm().
 */
function dst_perm() {
  return array('administer dst');
}

/**
 * Implementation of hook_init().
 */
function dst_init() {
  global $user;
  if (variable_get('dst_used', 0)) {
    $dst = _dst_get_user($user);
    $user->timezone = 0;
    if (function_exists('date_default_timezone_set')) {
      date_default_timezone_set($dst);
    }else {
      drupal_set_message(t('DST module installation was unsuccessfull. PHP 5.1 or higher version needed for work.'), 'error');
    }
  }
  if($user->uid == 1){
    if(!_dst_core_patched() ) {
      drupal_set_message(t('DST module installation was unsuccessfull. Please check if drupal core file includes/common.inc was patched as described in the module readme file'), 'error');
    }
  }
}
function theme_dst_user($account){
    $dst = _dst_get_user($account);
    $items['dst'] = array('title' => t('Daylight Savings Time'),
        'value' => t($dst),
        'class' => 'dst',
    );
    return array(t('Daylight Savings Time') => $items);
}
/**
 * Implementation of hook_user().
 */
function dst_user($op, &$edit, &$account, $category = NULL){
  global $user;
  switch ($op) {
    case 'view':
      if (variable_get('dst_used', 0)) {
          return theme('dst_user', $account);
      }
      break;
    case 'load':
      if (variable_get('dst_used', 0)) {
        if (empty($account->dst)) {
            $account->dst = _dst_get_user($account);
        }
        //$account->timezone = 0;
      }
      break;
    case 'validate':
      $zones = _dst_prepare_zonelist_for_form_select();
      if(isset($edit['dst'] ) ) if(!isset($zones[$edit['dst'] ] ) ) form_set_error('timezone', t('Wrong timezone selected'));
      break;
    case 'update':
      if(isset($edit['dst'] ) ){
          $dst = $edit['dst'];$dst1= false;
          $result = db_query('SELECT dst FROM {users_dst} WHERE uid=%d', $user->uid);
          if($o = db_fetch_object($result) ){
            $dst1 = $o->dst;
            unset($o);
          }
          if(isset($dst1) ) db_query('UPDATE {users_dst} set dst=\'%s\' WHERE uid=%d', $dst, $account->uid);
            else db_query('INSERT INTO {users_dst}(uid, dst) VALUES(%d,\'%s\')', $account->uid, $dst);
      }
      break;
  }
}

/**
 * DST settings form
 */
function dst_system_settings() {
  $form['dst_used'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' =>  variable_get('dst_used', 0),
  );
  $form['timezone'] = array(
    '#type' => 'select',
    '#title' => t('Time zone'),
    '#default_value' => _dst_get_default(),
    '#options' => _dst_prepare_zonelist_for_form_select(),
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration')
  );

  return $form;
}
function _dst_prepare_zonelist_for_form_select(){
    $arr1 = timezone_identifiers_list();
    array_multisort($arr1, SORT_STRING, SORT_ASC);
    $arr = array();
    foreach($arr1 as $value) $arr[$value] = t($value);
    unset($arr1);
    return $arr;
}
/**
 * Validation of DST settings form
 */
function dst_system_settings_validate($node, &$form) {
  $zones = _dst_prepare_zonelist_for_form_select();
  $form_values = $form['values'];
  if (!array_key_exists($form_values['timezone'], $zones)) {
    form_set_error('timezone', t('Wrong timezone selected'));
  }
}

/**
 * Submit of DST settings form
 */
function dst_system_settings_submit($form, &$form_state){
  $form_values = $form_state['values'];
  $new = $form_values['dst_used'];
  if ($new != variable_get('dst_used', 0)) {
    variable_set('dst_used', $new);
    if ($new) {
      variable_set('dst_default_timezone', variable_get('date_default_timezone', 0));
      variable_set('date_default_timezone', 0);
    }
    else {
      variable_set('date_default_timezone', variable_get('dst_default_timezone', 0));
    }
  }
  variable_set('dst_default', $form_values['timezone']);
}

/**
* Implementation of hook_form_alter().
*
* altering forms: system datetime, user edit, register
*/
function dst_form_alter(&$form, $form_state, $form_id){
//var_dump($form);
  if ($form_id == 'system_date_time_settings' && variable_get('dst_used', 0)) {
    $form['locale']['date_default_timezone']['#disabled'] = true;
  }
  //make sure this only shows on one edit page
  if (isset($form['_category'])) {
    if ($form['_category']['#value'] == 'account') {
      $one_page = 1;
    }
    else {
      $one_page = 0;
    }
  }
  else {
    $one_page = 1;
  }
  //user edit and user add
  if (($form_id == 'user_profile_form' /*|| $form_id == 'user_register'*/) && ($one_page == 1) && variable_get('configurable_timezones', 1) ) {
    if (variable_get('dst_used', 0)) {
      $form['timezone']['timezone']['#disabled'] = true;
      $form['timezone']['timezone']['#type'] = 'hidden';
      $default = $form['_account']['#value'];
      $default = _dst_get_user($default);
      $form['timezone']['dst'] = array(
        '#type' => 'select',
        '#title' => t('Time zone'),
        '#default_value' => $default,
        '#options' => _dst_prepare_zonelist_for_form_select(),
        '#weight' => 0,
      );
    }
  }
}

/**
 * Find user zone code or return default(system) zone code
 *
 * @param object $user
 * @return int
 */
function _dst_get_user($user) {
  $dst = '';
  if ($user->uid) {
    if (empty($user->dst) ) {
      $result = db_query('SELECT dst FROM {users_dst} WHERE uid=%d', $user->uid);
      if($o = db_fetch_object($result) ){
        $dst = $o->dst;
        unset($o);
      }
    } else {
      $dst = $user->dst;
    }
  }
  if (empty($dst)) {
    $dst = _dst_get_default();
  }
  return $dst;
}

/**
 * Find default(system) zone code
 *
 * @return int
 */
function _dst_get_default() {
  $default = variable_get('dst_default', 'GMT');
  return $default;
}

/**
 * Find default(system) zone code
 *
 * @return boolean
 */
function _dst_core_patched(){
  static $patched;
  if(isset($patched) ) return $patched;
  $patched = (true === dst_format_date(NULL, NULL, 'dst-module-check', NULL, NULL) );
  return $patched;
}
/*
 * Our custom rewrite of the format_date function
 */
function dst_format_date($timestamp, $type = 'medium', $format = '', $timezone = NULL, $langcode = NULL) {
  if(
    is_null($timestamp) && is_null($type) && is_null($timezone) 
    && is_null($langcode)
    && ($format =='dst-module-check')
  ){
      return TRUE;
  }
  if(variable_get('dst_used', 0) ){
    // custom rewrite of    format_date code goes here
      switch ($type) {
        case 'small':
          $format = variable_get('date_format_short', 'm/d/Y - H:i');
          break;
        case 'large':
          $format = variable_get('date_format_long', 'l, F j, Y - H:i');
          break;
        case 'custom':
          // No change to format.
          break;
        case 'medium':
        default:
          $format = variable_get('date_format_medium', 'D, m/d/Y - H:i');
      }
      $max = strlen($format);
      $date = '';
      for ($i = 0; $i < $max; $i++) {
        $c = $format[$i];
        if (strpos('AaDlM', $c) !== FALSE) {
          $date .= t(@date($c, $timestamp), array(), $langcode);
        }
        else if ($c == 'F') {
          // Special treatment for long month names: May is both an abbreviation
          // and a full month name in English, but other languages have
          // different abbreviations.
          $date .= trim(t('!long-month-name '. @date($c, $timestamp), array('!long-month-name' => ''), $langcode) );
        }
        else if (strpos('BdgGhHiIjLmnsStTUwWYyz', $c) !== FALSE) {
          $date .= @date($c, $timestamp);
        }
        else if ($c == 'r') {
          //$date .= dst_format_date($timestamp, 'custom', 'D, d M Y H:i:s O', NULL, $langcode);
          $date .= dst_format_date($timestamp, 'custom', 'D, d M Y H:i:s O');
        }
        else if ($c == 'O') {
          $date .= @date('O', $timestamp);
        }
        else if ($c == 'Z') {
          $date .= @date('Z', $timestamp);
        }
        else if ($c == '\\') {
          $date .= $format[++$i];
        }
        else {
          $date .= $c;
        }
      }
      return $date;
  }
  // original drupal code goes here if module is disabled
  if (!isset($timezone)) {
    global $user;
    if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
      $timezone = $user->timezone;
    }
    else {
      $timezone = variable_get('date_default_timezone', 0);
    }
  }

  $timestamp += $timezone;

  switch ($type) {
    case 'small':
      $format = variable_get('date_format_short', 'm/d/Y - H:i');
      break;
    case 'large':
      $format = variable_get('date_format_long', 'l, F j, Y - H:i');
      break;
    case 'custom':
      // No change to format.
      break;
    case 'medium':
    default:
      $format = variable_get('date_format_medium', 'D, m/d/Y - H:i');
  }

  $max = strlen($format);
  $date = '';
  for ($i = 0; $i < $max; $i++) {
    $c = $format[$i];
    if (strpos('AaDlM', $c) !== FALSE) {
      $date .= t(gmdate($c, $timestamp), array(), $langcode);
    }
    else if ($c == 'F') {
      // Special treatment for long month names: May is both an abbreviation
      // and a full month name in English, but other languages have
      // different abbreviations.
      $date .= trim(t('!long-month-name '. gmdate($c, $timestamp), array('!long-month-name' => ''), $langcode));
    }
    else if (strpos('BdgGhHiIjLmnsStTUwWYyz', $c) !== FALSE) {
      $date .= gmdate($c, $timestamp);
    }
    else if ($c == 'r') {
      $date .= format_date($timestamp - $timezone, 'custom', 'D, d M Y H:i:s O', $timezone, $langcode);
    }
    else if ($c == 'O') {
      $date .= sprintf('%s%02d%02d', ($timezone < 0 ? '-' : '+'), abs($timezone / 3600), abs($timezone % 3600) / 60);
    }
    else if ($c == 'Z') {
      $date .= $timezone;
    }
    else if ($c == '\\') {
      $date .= $format[++$i];
    }
    else {
      $date .= $c;
    }
  }

  return $date;
}
