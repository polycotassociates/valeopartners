<?php
// $Id$

/**
 * @file
 *   Installs the schema for the Firm Profile module.
 */

/**
 * Implementation of hook_install().
 */
function valeofirmprofile_install() {
	/* Create the views needed for this module */
	$query = "
		CREATE ALGORITHM = MERGE VIEW vw_rate_firm_position AS 
		SELECT rate_node.nid AS rate_nid,
			individual_node.nid AS individual_nid,
			firm_node.nid AS firm_nid,
			filing_node.nid AS filing_nid,
			rate_data.field_rate_hourly_value AS market_rate,
			rate_data.field_rate_standard_value AS standard_rate,
			filing_data.field_case_feeappdates_value2 AS feeappdate,
			rate_data.field_rate_position1_value AS position_tid
		FROM node filing_node
			LEFT JOIN node individual_node
			LEFT JOIN node rate_node
			LEFT JOIN content_type_rate rate_data ON rate_node.vid = rate_data.vid ON individual_node.nid = rate_data.field_rate_individual_nid ON filing_node.nid = rate_data.field_rate_filing_nid
			LEFT JOIN node firm_node ON rate_data.field_rate_firm_nid = firm_node.nid
			LEFT JOIN content_type_filing filing_data ON filing_node.vid = filing_data.vid
		WHERE (rate_node. STATUS <> 0)
			AND(rate_node.type = 'rate')
			AND(firm_node. STATUS <> 0)
			AND(filing_node. STATUS <> 0)";
	$result = db_query($query);
	$query = "
		CREATE ALGORITHM = MERGE VIEW vw_rate_firm_position_actual AS
		SELECT firm_node.nid AS firm_nid, 
			rate_data.field_rate_position1_value AS position_tid, 
			term_data.`name` AS position_name, 
			term_data.weight AS position_weight, 
			term_lineage.lineage AS position_lineage, 
			term_lineage.depth AS position_depth, 
			(DATE_FORMAT(STR_TO_DATE(filing_data.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')) AS feeappdate, 
			COUNT(rate_data.field_rate_hourly_value) AS count_rate,
			MAX(rate_data.field_rate_hourly_value) AS max_market_rate,
			MIN(rate_data.field_rate_hourly_value) AS min_market_rate,
			AVG(rate_data.field_rate_hourly_value) AS avg_market_rate,
			MAX(rate_node.nid) AS rate_nid, 
			term_hierarchy.parent AS parent_tid
		FROM node rate_node LEFT OUTER JOIN content_type_rate rate_data ON rate_node.vid = rate_data.vid
			INNER JOIN term_data ON term_data.tid = rate_data.field_rate_position1_value
			INNER JOIN term_lineage ON term_lineage.tid = term_data.tid
			RIGHT OUTER JOIN term_hierarchy ON term_hierarchy.tid = term_lineage.tid
			INNER JOIN node individual_node ON individual_node.nid = rate_data.field_rate_individual_nid
			INNER JOIN node filing_node ON filing_node.nid = rate_data.field_rate_filing_nid
			INNER JOIN node firm_node ON rate_data.field_rate_firm_nid = firm_node.nid
			LEFT OUTER JOIN content_type_filing filing_data ON filing_node.vid = filing_data.vid
		WHERE (rate_node.`status` <> 0) 
			AND (rate_node.type IN('rate')) 
			AND (firm_node.`status` <> 0) 
			AND (filing_node.`status` <> 0)
			AND (rate_data.field_rate_position1_value IS NOT NULL)
			AND (rate_data.field_rate_hourly_value > 0)
		GROUP BY firm_node.nid,rate_data.field_rate_position1_value, feeappdate";
	$result = db_query($query);
	// Add a table for parent position categories -- actual
	$query = "
		CREATE ALGORITHM = MERGE VIEW vw_rate_firm_position_actual_parent AS
		SELECT firm_node.nid AS firm_nid, 
			term_data.tid AS position_tid, 
			term_data.`name` AS position_name, 
			term_lineage.lineage AS position_lineage, 
			term_lineage.depth AS position_depth,
			(DATE_FORMAT(STR_TO_DATE(filing_data.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')) AS feeappdate, 
			COUNT(rate_data.field_rate_hourly_value) AS count_rate, 
			MAX(rate_data.field_rate_hourly_value) AS max_market_rate, 
			MIN(rate_data.field_rate_hourly_value) AS min_market_rate, 
			AVG(rate_data.field_rate_hourly_value) AS avg_market_rate 
		FROM node rate_node LEFT OUTER JOIN content_type_rate rate_data ON rate_node.vid = rate_data.vid
			INNER JOIN term_hierarchy ON term_hierarchy.tid = rate_data.field_rate_position1_value
			INNER JOIN term_data ON term_data.tid = term_hierarchy.parent
			INNER JOIN term_lineage ON term_lineage.tid = term_data.tid
			INNER JOIN node individual_node ON individual_node.nid = rate_data.field_rate_individual_nid
			INNER JOIN node filing_node ON filing_node.nid = rate_data.field_rate_filing_nid
			INNER JOIN node firm_node ON rate_data.field_rate_firm_nid = firm_node.nid
			INNER JOIN content_type_filing filing_data ON filing_node.vid = filing_data.vid
		WHERE (rate_node.`status` <> 0) 
			AND (rate_node.type IN('rate')) 
			AND (firm_node.`status` <> 0) 
			AND (filing_node.`status` <> 0)
			AND (rate_data.field_rate_position1_value IS NOT NULL)
			AND (rate_data.field_rate_hourly_value > 0)
			AND (term_lineage.depth = 1)
		GROUP BY firm_node.nid, position_tid, feeappdate";
	$result = db_query($query);

	$query = "
		CREATE ALGORITHM = MERGE VIEW vw_rate_firm_position_standard AS
		SELECT firm_node.nid AS firm_nid, 
			rate_data.field_rate_position1_value AS position_tid, 
			(DATE_FORMAT(STR_TO_DATE(filing_data.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')) AS feeappdate, 
			COUNT(rate_data.field_rate_standard_value) AS count_rate,
			MAX(rate_data.field_rate_standard_value) AS max_standard_rate,
			MIN(rate_data.field_rate_standard_value) AS min_standard_rate,
			AVG(rate_data.field_rate_standard_value) AS avg_standard_rate
		FROM node rate_node LEFT OUTER JOIN content_type_rate rate_data ON rate_node.vid = rate_data.vid
			INNER JOIN term_data ON term_data.tid = rate_data.field_rate_position1_value
			INNER JOIN node individual_node ON individual_node.nid = rate_data.field_rate_individual_nid
			INNER JOIN node filing_node ON filing_node.nid = rate_data.field_rate_filing_nid
			INNER JOIN node firm_node ON rate_data.field_rate_firm_nid = firm_node.nid
			LEFT OUTER JOIN content_type_filing filing_data ON filing_node.vid = filing_data.vid
		WHERE (rate_node.`status` <> 0) 
			AND (rate_node.type IN('rate')) 
			AND (firm_node.`status` <> 0) 
			AND (filing_node.`status` <> 0)
			AND (rate_data.field_rate_position1_value IS NOT NULL)
			AND (rate_data.field_rate_standard_value > 0)
		GROUP BY firm_node.nid,rate_data.field_rate_position1_value, feeappdate";
	$result = db_query($query);
	// Add a table for parent position categories -- standard
	$query = "
		CREATE ALGORITHM = MERGE VIEW vw_rate_firm_position_standard_parent AS
		SELECT firm_node.nid AS firm_nid, 
			term_data.tid AS position_tid, 
			(DATE_FORMAT(STR_TO_DATE(filing_data.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')) AS feeappdate, 
			COUNT(rate_data.field_rate_standard_value) AS count_rate, 
			MAX(rate_data.field_rate_standard_value) AS max_standard_rate, 
			MIN(rate_data.field_rate_standard_value) AS min_standard_rate, 
			AVG(rate_data.field_rate_standard_value) AS avg_standard_rate 
		FROM node rate_node LEFT OUTER JOIN content_type_rate rate_data ON rate_node.vid = rate_data.vid
			INNER JOIN term_hierarchy ON term_hierarchy.tid = rate_data.field_rate_position1_value
			INNER JOIN term_data ON term_data.tid = term_hierarchy.parent
			INNER JOIN term_lineage ON term_lineage.tid = term_data.tid
			INNER JOIN node individual_node ON individual_node.nid = rate_data.field_rate_individual_nid
			INNER JOIN node filing_node ON filing_node.nid = rate_data.field_rate_filing_nid
			INNER JOIN node firm_node ON rate_data.field_rate_firm_nid = firm_node.nid
			INNER JOIN content_type_filing filing_data ON filing_node.vid = filing_data.vid
		WHERE (rate_node.`status` <> 0) 
			AND (rate_node.type IN('rate')) 
			AND (firm_node.`status` <> 0) 
			AND (filing_node.`status` <> 0)
			AND (rate_data.field_rate_position1_value IS NOT NULL)
			AND (rate_data.field_rate_standard_value > 0)
			AND (term_lineage.depth = 1)
		GROUP BY firm_node.nid, position_tid, feeappdate";
	$result = db_query($query);
}

/**
 * Implementation of hook_uninstall().
 */
function valeofirmprofile_uninstall() {
	/* Drop all views for this module */
	$dropquery = "DROP VIEW IF EXISTS vw_rate_firm_position";
	$result = db_query($dropquery);
	$dropquery = "DROP VIEW IF EXISTS vw_rate_firm_position_actual";
	$result = db_query($dropquery);
	$dropquery = "DROP VIEW IF EXISTS vw_rate_firm_position_standard";
	$result = db_query($dropquery);
	$dropquery = "DROP VIEW IF EXISTS vw_rate_firm_position_actual_parent";
	$result = db_query($dropquery);
	$dropquery = "DROP VIEW IF EXISTS vw_rate_firm_position_standard_parent";
	$result = db_query($dropquery);
	cache_clear_all('variables', 'cache');
}