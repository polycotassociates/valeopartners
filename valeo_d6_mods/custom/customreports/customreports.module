<?php

/**
 * @file
 *
 * This module provides a sql input format and interface to select a report
 * content type.
 *
 * Once configured it will allow authorized users to create and download SQL
 * driven reports as CSV files
 *
 * @author Alex McFadyen <alex@openlyconnected.com>
 * @author Balazs Dianiska <balazs@dianiska.net>
 *
 */

define('CUSTOMREPORTS_CREATE', 100);

/**
 * Implementation of hook_perm().
 */
function customreports_perm() {
  return array(
    'view custom reports',
    'edit custom reports',
  );
}

/**
 * Implementation of hook_menu().
 */
function customreports_menu() {
  $items = array();
  /**
   * Administration form.
   */
  $items['admin/settings/customreports'] = array(
    'title' => 'Custom Reports',
    'description' => t('Settings to control what nodes are classed as customreports and who can view them'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('customreports_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['node/%node/csv'] = array(
    'title' => 'CSV export',
    'page callback' => 'customreports_render',
    'page arguments' => array('csv', 1),
    'access callback' => 'customreports_access',
    'access arguments' => array(1, 'view custom reports'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/xls'] = array(
    'title' => 'XLS export',
    'page callback' => 'customreports_render',
    'page arguments' => array('xls', 1),
    'access callback' => 'customreports_access',
    'access arguments' => array(1, 'view custom reports'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Combine node setting with access callback to determine if we can have a tab.
 */
function customreports_access($node, $perm) {
  $customreport_type = variable_get('customreports_node_type', 'customreport');
  return ($customreport_type == $node->type) && user_access($perm);
}

/**
 * Menu callback - Admin settings form.
 */
function customreports_admin_settings() {
  $form = array();

  $options = array(
    0 => t('<please select a node type>'),
    CUSTOMREPORTS_CREATE => t('<create a customreports node type'),
  );
  $types = node_get_types('names');
  $options += $types;

  $form['customreports_node_type'] = array(
    '#type' => 'select',
    '#title' => t('Node Type'),
    '#options' => $options,
    '#default_value' => variable_get('customreports_node_type', 'customreport'),
    '#description' => t('Select the node type that corresponds to a custom report.
                        This node type will be processed as a report when viewed.'),
  );

  $form['customreports_display_sql'] = array(
    '#title' => 'SQL display',
    '#type' => 'textarea',
    '#description' => t('Enter any text you want to replace the SQL query with when the node is viewed. Note, this will not affect the rendering of the output. Leave empty to have the query displayed.'),
    '#default_value' => variable_get('customreports_display_sql', ''),
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'customreports_admin_settings_custom_submit';
  return $form;
}

/**
 * Implementation of hook_submit - Create customreports node type
 */
function customreports_admin_settings_custom_submit($form_id, $form_values) {
  if (CUSTOMREPORTS_CREATE == $form_values['values']['customreports_node_type']) {
    // The user would like a customreport node type created
    $node_types = node_get_types('names');
    // Check to make sure there isn't already a node type of "customreport"
    if (isset($node_types['customreport'])) {
      //Just make the customreport node type the default value and let the user know.
      variable_set('customreports_node_type', 'customreport');
      drupal_set_message(t('There is already a node type of %type. The node type is being used.', array('%type' => 'customreport')));
    }
    else {
      //Generate the new node type.
      $node_type = new stdClass();
      $node_type->type = 'customreport';
      $node_type->name = t('Custom Report');
      $node_type->module = 'node'; // We trick node module into believing this is his own node type.
      $node_type->has_title = 1;
      $node_type->title_label = t('Report Name');
      $node_type->has_body = 1;
      $node_type->body_label = t('Report Code');
      $node_type->description = t('Custom reports are used to create a report that can then be viewed in different formats.');
      $node_type->help = t('Enter the code to generate the rows of the report. Be sure to select the corresponding input format.');
      $node_type->min_word_count = 1; //Require the report code
      $node_type->custom = 1;
      $node_type->modified = TRUE;
      $node_type->locked = 0;
      $node_type->orig_type = 'customreport';
      $node_type->status = 1;
      if (module_exists('comment')) {
        $node_type->comment = COMMENT_NODE_DISABLED;
      }
      node_type_save($node_type);
      variable_set('customreports_node_type', 'customreport');
      drupal_set_message(t('Created new node type %type.', array('%type' => 'customreport')));
      //Rebuild the menu so the new content type shows up
      menu_rebuild();
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function customreports_nodeapi(&$node, $op, $a3, $a4) {
  if ($node->type == variable_get("customreports_node_type", 'customreport')) {
    if ($op == 'view') {
      /**
       * Enforce permissions
       */
      if (!user_access('view custom reports')) {
        drupal_access_denied();
        exit;
      }

      if ($message = trim(variable_get('customreports_display_sql', ''))) {
        unset($node->content['body']);
        $node->content['body']['#value'] = $message;
      }
    }
  }
}

/**
 * Central interpreter for the query and arguments.
 */
function customreports_render($type, $node) {
  $args = func_get_args();
  unset($args[0]);
  unset($args[1]);

  // Pull 'use' line out of the node's body, if we are to use a custom db.
  $use_db_regex = '/^use (\w+);/i';
  $custom_db = preg_match($use_db_regex, $node->body, $matches);

  $thisBody = expandSQL($node->body); //PROCESS AND TOKENIZE - JDS - 2/19/2010
  // Allow parameters to be passed as arguments to the query.

  // Check to see if a custom database connection should be used.
  if($custom_db) {
    db_set_active($matches[1]);
    $node->body = str_replace($matches[0], '', $node->body);
    $result = db_query($thisBody, $args);
  }
  else {
    // Check to see if Pressflow is being used.
    if (function_exists('db_query_slave')) {
      // Pressflow users can use the slave db for these queries, read more on the
      // following link.
      // https://wiki.fourkitchens.com/display/PF/Using+database+replication+with+Pressflow+5+and+6
      $result = db_query_slave($thisBody, $args);
    }
    else {
      // We are on a normal installation of drupal.
     $result = db_query($thisBody, $args);
    }
  }

  if($custom_db) {
    db_set_active();
  }

  while ($item = db_fetch_array($result)) {
    $data[] = $item;
  }

  if (count($data)) {
    // Any element will hold the field names, lets pick the first one.
    foreach ($data[0] as $key => $value) {
      $header[] = $key;
    }
  }

  if (is_array($header) && is_array($data)) {
    $function = 'customreports_render_'. $type;
    if (function_exists($function)) {
      return call_user_func($function, $header, $data, $node);
    }
    else {
      drupal_set_message(t('Requested render type not available, falling back to table display.'), 'warning');
      return theme('table', $header, $data);
    }
  }
  else {
    drupal_set_message(t('No output from query.'), 'warning');
    return '';
  }
}

/**
 * Render a CSV file from the input.
 * @param array $header
 *   Array of items to be rendered as the CSV header.
 * @param array $rows
 *   Array of items to be rendered as the CSV content.
 * @param string $separator
 *   The data column separator string.
 * @param string $delimiter
 *   The field delimiter string.
 */
function customreports_render_csv($header, $rows, $node, $separator = ',', $delimiter = '"') {
  $timestamp = date("d-m-y"); // Create a timestamp for the filename.
  header("Content-type: text/csv");
  header('Content-Disposition: attachment; filename="ValeoPartners-Rates-' . $timestamp . '.csv"');

  /**
   * Warning, we are replacing double quotes with single quotes so the delimiter will
   * not get confused.
   */
  array_walk_recursive($header, '_clean_quotes');
  array_walk_recursive($rows, '_clean_quotes');

  $output = $delimiter . implode('"'. $separator .'"', $header) . $delimiter ."\n"; // header
  foreach ($rows as $row) { // loop through all rows
    $output .= $delimiter . implode('"'. $separator .'"', $row) . $delimiter . "\n"; // create CSV of rows
  }

  print $output;
  exit;
}

/**
 * Render an XLS file from the input.
 * @param array $header
 *   Array of items to be rendered as the header of the XLS table.
 * @param array $rows
 *   Array of items to be rendered as the XLS content.
 */
function customreports_render_xls($header, $rows, $node) {
  $timestamp = date("d-m-y"); // Create a timestamp for the filename.
  $filename = 'ValeoPartners-Rates-'. $timestamp .'.xls';

  header('Content-type: application/vnd.ms-excel');
  header('Content-Disposition: attachment; filename="'. $filename .'"');
  $output = '<html>';
  $output .= '<head><meta http-equiv=Content-Type content="text/html; charset=utf-8"></head>';
  $output .= '<body>';
  $output .= theme('table', $header, $rows);
  $output .= "</body></html>";
  print $output;
  exit;
}


/**
 * Note: since we trick node module to take ownership for the dynamically
 * created new content type (so we get the forms and submission handlers for free),
 * we can not use the hook_access() to define our own permission handling.
 */

/**
 * Implementation of hook_node_grants().
 * Declare our realm and add the role keys to it that we use as grant id.
 * @see customreports_node_access_records().
 */
function customreports_node_grants($account, $op) {
  return array(
    'customreports' => array_keys($account->roles),
  );
}

/**
 * Implementation of hook_node_access_records()
 * For our content type allow only signed in users with access content
 * permission, and then check if they have the 'edit custom reports' 
 * permission for edit, or delete, and the 'view custom reports' to view.
 */
function customreports_node_access_records($node) {
  $grants = array();
  if ($node->type == variable_get("customreports_node_type", 'customreport')) {
    //Load all the roles with the custom reports view role.
    $view_reports_roles = user_roles(FALSE, 'view custom reports');
    $edit_reports_roles = user_roles(FALSE, 'edit custom reports');
    //Step through all the users with the "access content" role and set
    //permissions to either allow viewing of the report or deny it
    foreach (user_roles(TRUE, 'access content') as $rid => $role) {
      $grants[$rid] = array(
        'grant_view' => isset($view_reports_roles[$rid]),
        'grant_update' => isset($edit_reports_roles[$rid]),
        'grant_delete' => isset($edit_reports_roles[$rid]),
        'realm' => 'customreports',
        'gid' => $rid
        );
    }
  }
  return $grants;
}

function _clean_quotes(&$item, $key) {
  $item = str_replace('"', "'", $item);
}

function expandSQL($query) {
	$basequery = 'SELECT content_type_individual.field_individual_lastname_value AS `Last Name`, 
		content_type_individual.field_individual_firstname_value AS `First Name`, 
		content_type_individual.field_individual_middlename_value AS `Middle Name`, 
		firm.title AS Firm, 
		position.name AS Position, 
		client.title AS Company, 
		term_data.name AS Industry, 
		pa1.name AS `Practice Area 1`, 
		pa2.name AS `Practice Area 2`, 
		pa3.name AS `Practice Area 3`, 
		DATE_FORMAT(content_type_individual.field_individual_graddate_value,\'%Y\') AS `Grad Date`, 
		DATE_FORMAT(content_type_individual.field_individual_bardate_value,\'%Y\') AS `Bar Date`, 
		statebar.name AS `State Bar`, 
		city.name AS City, 
		content_type_rate.field_rate_hourly_value AS `Actual Rate`, 
		content_type_rate.field_rate_standard_value AS `Standard Rate`, 
		DATE_FORMAT(filing.field_case_feeappdates_value2,\'%Y\') AS `Rate Year`,
		content_type_rate.field_rate_hours_value AS Hours, 
		content_type_rate.field_rate_total_value AS Total, 
		content_type_rate.field_rate_flatfee_value AS `Flat Fee`,
		content_type_rate.field_rate_retainer_value AS `Retainer Fee`, 
		content_type_rate.field_rate_success_value AS `Success Fee`,
		content_type_rate.field_rate_transactional_value AS `Transaction Fee`,
		`case`.field_case1_number_value AS `Case Number`, 
		`case`.field_case1_name_value AS `Case Name`, 
		court.name AS Court, 
		DATE_FORMAT(`case`.field_case1_datefiled_value,\'%m-%e-%Y\') AS `Date Filed`, 
		filing.field_case_filingdescription_value AS `Filing Description`, 
		filing.field_case_filingnumber_value AS `Filing Number`, 
		DATE_FORMAT(filing.field_case_feeappdates_value,\'%m-%e-%Y\') AS `Fee Date Range Start`, 
		DATE_FORMAT(filing.field_case_feeappdates_value2,\'%m-%e-%Y\') AS `Fee Date Range End`
	FROM content_type_rate LEFT OUTER JOIN node individual_node ON individual_node.nid = content_type_rate.field_rate_individual_nid
		LEFT OUTER JOIN node filing_node ON filing_node.nid = content_type_rate.field_rate_filing_nid
		LEFT OUTER JOIN content_type_filing filing ON filing.vid = filing_node.vid
		LEFT OUTER JOIN node case_node ON case_node.nid = filing.field_filing_case_nid
		LEFT OUTER JOIN content_type_case `case` ON `case`.vid = case_node.vid
		LEFT OUTER JOIN term_data court ON court.tid = `case`.field_case1_court_value
		LEFT OUTER JOIN node node_base ON node_base.vid = content_type_rate.vid
		LEFT OUTER JOIN term_data position ON position.tid = content_type_rate.field_rate_position1_value
		LEFT OUTER JOIN node firm_node ON firm_node.nid = content_type_rate.field_rate_firm_nid
		LEFT OUTER JOIN node firm ON firm.vid = firm_node.vid
		LEFT OUTER JOIN content_type_individual ON content_type_individual.vid = individual_node.vid
		LEFT OUTER JOIN term_data pa1 ON pa1.tid = content_type_individual.field_individual_pa1_value
		LEFT OUTER JOIN term_data pa2 ON pa2.tid = content_type_individual.field_individual_pa2_value
		LEFT OUTER JOIN term_data pa3 ON pa3.tid = content_type_individual.field_individual_pa3_value
		LEFT OUTER JOIN term_data statebar ON statebar.tid = content_type_individual.field_individual_statebar_value
		LEFT OUTER JOIN term_data city ON city.tid = content_type_individual.field_individual_city_value
		LEFT OUTER JOIN node client_node ON client_node.nid = content_type_rate.field_rate_client_nid
		LEFT OUTER JOIN node client ON client.vid = client_node.vid
		LEFT OUTER JOIN content_type_company client_data ON client_data.vid = client.vid
		LEFT OUTER JOIN term_data ON term_data.tid = client_data.field_client_industry_value
	WHERE ( node_base.status <> 0 ) AND ( node_base.type IN ( \'rate\' ) ) AND (individual_node.title IS NOT NULL) ';
	$basequery_unpub = 'SELECT content_type_individual.field_individual_lastname_value AS `Last Name`, 
		content_type_individual.field_individual_firstname_value AS `First Name`, 
		content_type_individual.field_individual_middlename_value AS `Middle Name`, 
		firm.title AS Firm, 
		position.name AS Position, 
		client.title AS Company, 
		term_data.name AS Industry, 
		pa1.name AS `Practice Area 1`, 
		pa2.name AS `Practice Area 2`, 
		pa3.name AS `Practice Area 3`, 
		DATE_FORMAT(content_type_individual.field_individual_graddate_value,\'%Y\') AS `Grad Date`, 
		DATE_FORMAT(content_type_individual.field_individual_bardate_value,\'%Y\') AS `Bar Date`, 
		statebar.name AS `State Bar`, 
		city.name AS City, 
		content_type_rate.field_rate_hourly_value AS `Actual Rate`, 
		content_type_rate.field_rate_standard_value AS `Standard Rate`, 
		DATE_FORMAT(filing.field_case_feeappdates_value2,\'%Y\') AS `Rate Year`,
		content_type_rate.field_rate_hours_value AS Hours, 
		content_type_rate.field_rate_total_value AS Total, 
		content_type_rate.field_rate_flatfee_value AS `Flat Fee`,
		content_type_rate.field_rate_retainer_value AS `Retainer Fee`, 
		content_type_rate.field_rate_success_value AS `Success Fee`,
		content_type_rate.field_rate_transactional_value AS `Transaction Fee`,
		`case`.field_case1_number_value AS `Case Number`, 
		`case`.field_case1_name_value AS `Case Name`, 
		court.name AS Court, 
		DATE_FORMAT(`case`.field_case1_datefiled_value,\'%m-%e-%Y\') AS `Date Filed`, 
		filing.field_case_filingdescription_value AS `Filing Description`, 
		filing.field_case_filingnumber_value AS `Filing Number`, 
		DATE_FORMAT(filing.field_case_feeappdates_value,\'%m-%e-%Y\') AS `Fee Date Range Start`, 
		DATE_FORMAT(filing.field_case_feeappdates_value2,\'%m-%e-%Y\') AS `Fee Date Range End`
	FROM content_type_rate LEFT OUTER JOIN node individual_node ON individual_node.nid = content_type_rate.field_rate_individual_nid
		LEFT OUTER JOIN node filing_node ON filing_node.nid = content_type_rate.field_rate_filing_nid
		LEFT OUTER JOIN content_type_filing filing ON filing.vid = filing_node.vid
		LEFT OUTER JOIN node case_node ON case_node.nid = filing.field_filing_case_nid
		LEFT OUTER JOIN content_type_case `case` ON `case`.vid = case_node.vid
		LEFT OUTER JOIN term_data court ON court.tid = `case`.field_case1_court_value
		LEFT OUTER JOIN node node_base ON node_base.vid = content_type_rate.vid
		LEFT OUTER JOIN term_data position ON position.tid = content_type_rate.field_rate_position1_value
		LEFT OUTER JOIN node firm_node ON firm_node.nid = content_type_rate.field_rate_firm_nid
		LEFT OUTER JOIN node firm ON firm.vid = firm_node.vid
		LEFT OUTER JOIN content_type_individual ON content_type_individual.vid = individual_node.vid
		LEFT OUTER JOIN term_data pa1 ON pa1.tid = content_type_individual.field_individual_pa1_value
		LEFT OUTER JOIN term_data pa2 ON pa2.tid = content_type_individual.field_individual_pa2_value
		LEFT OUTER JOIN term_data pa3 ON pa3.tid = content_type_individual.field_individual_pa3_value
		LEFT OUTER JOIN term_data statebar ON statebar.tid = content_type_individual.field_individual_statebar_value
		LEFT OUTER JOIN term_data city ON city.tid = content_type_individual.field_individual_city_value
		LEFT OUTER JOIN node client_node ON client_node.nid = content_type_rate.field_rate_client_nid
		LEFT OUTER JOIN node client ON client.vid = client_node.vid
		LEFT OUTER JOIN content_type_company client_data ON client_data.vid = client.vid
		LEFT OUTER JOIN term_data ON term_data.tid = client_data.field_client_industry_value
	WHERE ( node_base.status = 0 ) AND ( node_base.type IN ( \'rate\' ) ) AND (individual_node.title IS NOT NULL) ';


	$order_statement = ' ORDER BY `Actual Rate` DESC, `Last Name` ASC, `First Name` ASC';
	$order_statement_firm = ' ORDER BY `Firm` ASC, `Last Name` ASC, `First Name` ASC';
	$limit_statement = ' LIMIT 0,999';
	$compcircle_statement = '';
	$pos = strpos($query, '[compcirclefirms]');
	if ($pos !== false) { // if the comp circle is requested, call the function to get the list of firm IDs
		$compcircle_statement = ' AND ( content_type_rate.field_rate_firm_nid IN (' . valeo_get_compsearch_list() . ') )';
	}
	
	$a = array('firm','company','fees','position','practicearea','region','individual','client','industry','graddate_min','graddate_max','bardate_min','bardate_max','rateyear_min','rateyear_max');
	
	$a['firm']['rptext'] = ' AND ( content_type_rate.field_rate_firm_nid IN (|var|) )';
	$a['firm']['tktext'] = '[get-param-field_firm_value]';
	$a['company']['rptext'] = ' AND ( content_type_rate.field_rate_client_nid IN (|var|) )';
	$a['company']['tktext'] = '[get-param-company]';
	$a['fees']['rptext'] = ' AND ((content_type_rate.field_rate_flatfee_value IS NOT NULL) OR (content_type_rate.field_rate_retainer_value IS NOT NULL) OR (content_type_rate.field_rate_success_value IS NOT NULL) OR (content_type_rate.field_rate_transactional_value IS NOT NULL))';
	$a['fees']['tktext'] = '[fee_limiter]';
	$a['position']['rptext'] = ' AND (node_base.vid IN (SELECT tn.vid FROM term_node tn LEFT JOIN term_hierarchy th ON th.tid = tn.tid LEFT JOIN term_hierarchy th1 ON th.parent = th1.tid LEFT JOIN term_hierarchy th2 ON th1.parent = th2.tid	LEFT JOIN term_hierarchy th3 ON th2.parent = th3.tid LEFT JOIN term_hierarchy th4 ON th3.parent = th4.tid WHERE tn.tid IN (|var|) OR th1.tid IN (|var|) OR th2.tid IN (|var|) OR th3.tid IN (|var|) OR th4.tid IN (|var|)))';
	$a['position']['tktext'] = '[get-param-field_position_value]';
	$a['practicearea']['rptext'] = ' AND ((content_type_individual.field_individual_pa1_value IN (|var|)) OR (content_type_individual.field_individual_pa2_value IN (|var|)) OR (content_type_individual.field_individual_pa3_value IN (|var|)))';
	$a['practicearea']['tktext'] = '[get-param-field_practicearea_value]';
	$a['region']['rptext'] = ' AND (individual_node.vid IN (SELECT tn.vid FROM term_node tn LEFT JOIN term_hierarchy th ON th.tid = tn.tid LEFT JOIN term_hierarchy th1 ON th.parent = th1.tid LEFT JOIN term_hierarchy th2 ON th1.parent = th2.tid LEFT JOIN term_hierarchy th3 ON th2.parent = th3.tid WHERE tn.tid IN (|var|) OR th1.tid IN (|var|) OR th2.tid IN (|var|) OR th3.tid IN (|var|) )) AND city.name IS NOT NULL';
	$a['region']['tktext'] = '[get-param-field_city_value]';
	$a['individual']['rptext'] = ' AND (UPPER(individual_node.title) LIKE UPPER(\'%%|var|%%\'))';
	$a['individual']['tktext'] = '[get-param-title]';
	$a['client']['rptext'] = ' AND ( content_type_rate.field_rate_client_nid IN (|var|) )';
	$a['client']['tktext'] = '[get-param-field_client_value]';
	$a['industry']['rptext'] = ' AND ( client_data.field_client_industry_value IN (|var|) )';
	$a['industry']['tktext'] = '[get-param-field_industry_value]';
	$a['graddate_min']['rptext'] = ' AND (DATE_FORMAT(STR_TO_DATE(content_type_individual.field_individual_graddate_value, \'%Y-%m-%%dT%T\'), \'%Y\') >= \'|var|\')';
	$a['graddate_min']['tktext'] = '[get-param-graddate_min]';
	$a['graddate_max']['rptext'] = ' AND (DATE_FORMAT(STR_TO_DATE(content_type_individual.field_individual_graddate_value, \'%Y-%m-%%dT%T\'), \'%Y\') <= \'|var|\')';
	$a['graddate_max']['tktext'] = '[get-param-graddate_max]';
	$a['bardate_min']['rptext'] = ' AND (DATE_FORMAT(STR_TO_DATE(content_type_individual.field_individual_bardate_value, \'%Y-%m-%%dT%T\'), \'%Y\') >= \'|var|\')';
	$a['bardate_min']['tktext'] = '[get-param-bardate_min]';
	$a['bardate_max']['rptext'] = ' AND (DATE_FORMAT(STR_TO_DATE(content_type_individual.field_individual_bardate_value, \'%Y-%m-%%dT%T\'), \'%Y\') <= \'|var|\')';
	$a['bardate_max']['tktext'] = '[get-param-bardate_max]';
	$a['rateyear_min']['rptext'] = ' AND (DATE_FORMAT(STR_TO_DATE(filing.field_case_feeappdates_value2, \'%Y-%m-%%dT%T\'), \'%Y\') >= \'|var|\')';
	$a['rateyear_min']['tktext'] = '[get-param-rateyear_min]';
	$a['rateyear_max']['rptext'] = ' AND (DATE_FORMAT(STR_TO_DATE(filing.field_case_feeappdates_value2, \'%Y-%m-%%dT%T\'), \'%Y\') <= \'|var|\')';
	$a['rateyear_max']['tktext'] = '[get-param-rateyear_max]';

	$query = str_replace('[basequery]',$basequery,$query);
	$query = str_replace('[basequery_unpub]',$basequery_unpub,$query);
	foreach($a AS $thisA) {
		$thisA['value'] = token_replace($thisA['tktext']);
		$thisA['rptext'] = str_replace('|var|',$thisA['value'],$thisA['rptext']);
		$query = $thisA['value'] ? str_replace($thisA['tktext'],$thisA['rptext'],$query) : str_replace($thisA['tktext'],'',$query);
	}
	$query = str_replace('[compcirclefirms]',$compcircle_statement,$query);
	$query = str_replace('[order]',$order_statement,$query);
	$query = str_replace('[order_firm]',$order_statement_firm,$query);
	$query = str_replace('[limit]',$limit_statement,$query);
	
	return $query;
}