	<?php

// $Id$

/**
 * @file
 *   Stats By Time functions
 */



/**
 * Implementation of hook_menu().
 */
function statsbytime_menu() {
  $menu['admin/settings/statsbytime'] = array(
    'title' => t('Stats By Time Settings'),
    'description' => t('Administer Stats By Time Settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('statsbytime_settings_form'),
    'access arguments' => array('manage statsbytime settings'),
    'file' => 'statsbytime.admin.inc',
  );
  return $menu;
}

/**
 * Implementation of hook_perm().
 */
function statsbytime_perm() {
  $perm = array(
    'manage statsbytime settings',
  );
  return $perm;
}

/**
 * Get module to call views file
 */
function statsbytime_views_api() {
	return array('api' => 2.0);
}

/**
 * Implementation of hook_nodeapi() to run when nodes are updated or added
 */
function statsbytime_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	switch ($op) {
		case 'insert':
		case 'delete':
		case 'update':
			switch ($node->type) {
				case 'firm':
					statsbytime_update_firm($node->nid);
					break;
				case 'rate':
					statsbytime_update_rate($node->nid);
					break;
				case 'filing':
					statsbytime_update_filing($node->nid);
					break;
				case 'individual':
					statsbytime_update_individual($node->nid);
					break;
			}
			break;
	}
}

/**
 * Statistics name lookup from abbreviation
 */
function statsbytime_lookup_stat($stat) {
	switch ($stat) {
		case 'count':
			return 'Count';
			break;
		case 'min':
			return 'Minimum';
			break;
		case 'max':
			return 'Maximum';
			break;
		case 'avg':
			return 'Average';
			break;
		case 'med':
			return 'Median';
			break;
		case 'std':
			return 'Standard Deviation';
			break;
		default:
			return 'Unknown Statistic';
	}
}

/**
 * Get the possible content fields for display
 */
function statsbytime_get_contentfields() {
	$fieldarray = content_fields();
	$fielddisplay = array();
	foreach($fieldarray as $field) {
		if ($field['type'] == 'number_decimal' || ($field['type'] == 'computed' && $field['data_type'] == 'float')) {
			$fielddisplay[$field['field_name']] = $field['widget']['label'];
		}
	}
	return $fielddisplay;
}

/**
 * Get the possible years for display
 */
function statsbytime_get_years() {
	$yeararray = array();
	for ($i = date('Y'); $i >= 1990; $i--) {
		$yeararray[$i] = $i;
	}
	return $yeararray;
}




/**
 * Generate the statistics for a single node and add to the storage table
 */
function statsbytime_generate_stats($nids) {
	if (is_array($nids) && count($nids)) {
		/* Clear out the old data for all individuals */
		$placeholders = implode(', ', array_fill(0, count($nids), "%d"));
		db_query("DELETE FROM {statsbytime} WHERE nid IN ($placeholders)", $nids);

		/* Determine all the years that need to be calculated */
		$years = array();
		for ($i = variable_get('statsbytime_years', ''); $i <= date('Y'); $i++) {
			$years[] = $i;
		}

		/* Determine all the fields that need to be calculated */
		$fields = array();
		foreach(variable_get('statsbytime_fields', '') as $field_option) {
			if($field_option) {
				$fields[] = $field_option;
			}
		}
		
		/* Determing the statistics that need to be calculated */
		$stats_options = variable_get('statsbytime_stats', '');
		$stat_types = array('min','max','avg','std');

		/* Set base statistics query */
		$statsquery = "
			SELECT %s(stat_value.%s_value) AS stat
			FROM {node} node LEFT OUTER JOIN {content_type_rate} individual_data ON node.vid = individual_data.vid
				LEFT OUTER JOIN {node} individual_node ON individual_data.field_rate_individual_nid = individual_node.nid
				LEFT OUTER JOIN {content_type_rate} stat_value ON node.vid = stat_value.vid
				LEFT OUTER JOIN {node} filing_node ON stat_value.field_rate_filing_nid = filing_node.nid
				LEFT OUTER JOIN {content_type_filing} filing_data ON filing_node.vid = filing_data.vid
			WHERE (DATE_FORMAT(STR_TO_DATE(filing_data.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')= '%d') AND
				(individual_node.nid = '%d') AND
				(stat_value.%s_value IS NOT NULL)";
		
		/* Set base median statistics query */
		$medquery = "
			SELECT ((MAX(stat_value.%s_value) + (
				SELECT MIN(stat_value.%s_value)
				FROM {node} node LEFT OUTER JOIN {content_type_rate} individual_data ON node.vid = individual_data.vid
					LEFT OUTER JOIN {node} individual_node ON individual_data.field_rate_individual_nid = individual_node.nid
					LEFT OUTER JOIN {content_type_rate} stat_value ON node.vid = stat_value.vid
					LEFT OUTER JOIN {node} filing_node ON stat_value.field_rate_filing_nid = filing_node.nid
					LEFT OUTER JOIN {content_type_filing} filing_data ON filing_node.vid = filing_data.vid
				WHERE (DATE_FORMAT(STR_TO_DATE(filing_data.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')= '%d') AND
					(individual_node.nid = '%d') AND
					(stat_value.%s_value IS NOT NULL)
				ORDER BY stat_value.%s_value DESC
				LIMIT %d)) / 2) AS stat
			FROM {node} node LEFT OUTER JOIN {content_type_rate} individual_data ON node.vid = individual_data.vid
				LEFT OUTER JOIN {node} individual_node ON individual_data.field_rate_individual_nid = individual_node.nid
				LEFT OUTER JOIN {content_type_rate} stat_value ON node.vid = stat_value.vid
				LEFT OUTER JOIN {node} filing_node ON stat_value.field_rate_filing_nid = filing_node.nid
				LEFT OUTER JOIN {content_type_filing} filing_data ON filing_node.vid = filing_data.vid
			WHERE (DATE_FORMAT(STR_TO_DATE(filing_data.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')= '%d') AND
				(individual_node.nid = '%d') AND
				(stat_value.%s_value IS NOT NULL)
			ORDER BY stat_value.%s_value ASC
			LIMIT %d";
	
		/* Loop through all the NIDs */
		foreach($nids as $nid) {
			if ($nid > 0) {
				/* Loop through each year for each field and run the queries that are required for each statsistic selected */
				foreach($fields as $field) {
					foreach($years as $year) {
						$thisdata = array(
							'nid' => $nid,
							'field' => $field,
							'year' => $year,
							'stat_count' => 0,
							'stat_med' => 0,
						);
						/* Calculate Count */
						$args = array('count',$field,$year,$nid,$field);
						$result = db_query($statsquery, $args);
						while ($item = db_fetch_array($result)) {
							$thisdata['stat_count'] = $item['stat'];
						}
						switch ($thisdata['stat_count']) {
							case 0:
								/* Set all stats to zero; no more queries */
								foreach($stat_types as $stat_type) {
									$thisdata['stat_' . $stat_type] = 0;
								}
								break;
							case 1:
								/* Calculate simple stats for one type, then use that everywhere */
								$args = array($stat_types[0],$field,$year,$nid,$field);
								$result = db_query($statsquery, $args);
								while ($item = db_fetch_array($result)) {
									$firststat = $item['stat'];
								}
								foreach($stat_types as $stat_type) {
									$thisdata['stat_' . $stat_type] = $firststat;
								}
								$thisdata['stat_med'] = $firststat;
								$thisdata['stat_std'] = 0;
								break;
							default:
								/* Calculate simple stats for all stats types */
								foreach($stat_types as $stat_type) {
									if ($stats_options[$stat_type]) {
										$args = array($stat_type,$field,$year,$nid,$field);
										$result = db_query($statsquery, $args);
										while ($item = db_fetch_array($result)) {
											$thisdata['stat_' . $stat_type] = $item['stat'];
										}
									}
								}
								/* Calculate Median -- requires a different query */
								if ($stats_options['med']) {
									$half = ceil($thisdata['stat_count'] / 2);
									$args = array($field,$field,$year,$nid,$field,$field,$half,$year,$nid,$field,$field,$half);
									$result = db_query($medquery, $args);
									while ($item = db_fetch_array($result)) {
										$thisdata['stat_med'] = $item['stat'];
									}
								}
								break;
						}
						/* Insert the calculated stats into the table */
						$thisdata['created'] = date('U');
						drupal_write_record('statsbytime',$thisdata);
					}
				}
			}
		}
	}
}


/**
 * Find and record the most recent rate for the supplied attorneys
 */
function statsbytime_setcurrentrate($nids) {
	if (is_array($nids) && count($nids)) {
		/* Clear out the old data for all individuals */
		$placeholders = implode(', ', array_fill(0, count($nids), "%d"));
		db_query("DELETE FROM {current_rate} WHERE nid IN ($placeholders)", $nids);

		/* Set base current rate query */
		$ratequery = "
			SELECT rate_data.field_rate_individual_nid AS nid, 
				rate_node.nid AS rate_nid, 
				filing_data.field_case_feeappdates_value2 AS feedate
			FROM {content_type_rate} rate_data RIGHT OUTER JOIN {node} rate_node ON rate_data.vid = rate_node.vid
				INNER JOIN {node} filing_node ON filing_node.nid = rate_data.field_rate_filing_nid
				LEFT OUTER JOIN {content_type_filing} filing_data ON filing_data.vid = filing_node.vid
			WHERE rate_node.type = 'rate' AND rate_data.field_rate_individual_nid = '%d'
			ORDER BY feedate DESC
			LIMIT 1";	
		/* Loop through all the NIDs */
		foreach($nids as $nid) {
			if ($nid > 0) {
				/* Find the most current rateand insert it in the table */
				$args = array($nid);
				$result = db_query($ratequery, $args);
				while ($item = db_fetch_array($result)) {
					$thisdata = array(
						'nid' => $item['nid'],
						'rate_nid' => $item['rate_nid'],
						'created' => date('U'),
					);
					drupal_write_record('current_rate',$thisdata);
				}
			}
		}
	}
}


/**
 * Clear the statistics for a single node from the storage table
 */
function statsbytime_clear_stats($nid) {
	db_query("DELETE FROM {statsbytime} WHERE nid = '%d'", $nid);
}

/**
 * Clear the current rate information
 */
function statsbytime_clear_currentrate($nid) {
	db_query("DELETE FROM {current_rate} WHERE nid = '%d'", $nid);
}


/**
 * Generate all stats for the site and store in the storage table
 */
function statsbytime_generate_all_stats() {
	$query = "SELECT node.nid AS nid FROM {node} node  WHERE (node.type = 'individual') AND (node.status <> 0)";
	$result = db_query($query);
	$nids = array();
	while ($item = db_fetch_array($result)) {
		$nids[] = $item['nid'];
	}
	statsbytime_generate_stats($nids); // Generate new statistics.
	statsbytime_setcurrentrate($nids); // Find and set the most current rate
}

/**
 * Generate all current rates for the site and store in a table
 */
function statsbytime_generate_all_currentrates() {
	$query = "SELECT node.nid AS nid FROM {node} node  WHERE (node.type = 'individual') AND (node.status <> 0)";
	$result = db_query($query);
	$nids = array();
	while ($item = db_fetch_array($result)) {
		$nids[] = $item['nid'];
	}
	statsbytime_setcurrentrate($nids); // Find and set the most current rate
}


/**
 * Generate missing stats on only those individuals not already stored in the statsbytime table
 */
function statsbytime_generate_missing_stats() {
	$query = "SELECT node.nid AS nid FROM {node} LEFT OUTER JOIN {statsbytime} ON (node.nid = statsbytime.nid) WHERE (statsbytime.nid IS NULL) AND (node.type = 'individual') AND (node.status <> 0)";
	$result = db_query($query);
	$nids = array();
	while ($item = db_fetch_array($result)) {
		$nids[] = $item['nid'];
	}
	statsbytime_generate_stats($nids); // Generate new statistics.
	statsbytime_setcurrentrate($nids); // Find and set the most current rate
}



/**
 * Update/Create statistics for all records associated with a specific rate
 */
function statsbytime_update_rate($nid) {
	if ($nid > 0) {
		/* Find all the individuals related to the rate */
		$query = "
			SELECT DISTINCT(individual_node.nid) as nid
			FROM {node} rate_node RIGHT OUTER JOIN {content_type_rate} rate_data ON rate_data.nid = rate_node.nid
				LEFT OUTER JOIN {node} individual_node ON rate_data.field_rate_individual_nid = individual_node.nid
			WHERE rate_node.nid = '%d'";
		$args = array($nid);
		$result = db_query($query, $args);
		$nids = array();
		while ($item = db_fetch_array($result)) {
			$nids[] = $item['nid'];
		}
		statsbytime_generate_stats($nids); // Generate new statistics.
		statsbytime_setcurrentrate($nids); // Find and set the most current rate
	}
}


/**
 * Update/Create current rates for all records associated with a specific firm
 */
function statsbytime_update_firm($nid) {
	if ($nid > 0) {
		/* find all the individuals related to this filing */
		$query = "
			SELECT DISTINCT(content_type_rate.field_rate_individual_nid) AS nid
			FROM {content_type_rate} INNER JOIN {node} rate_node ON content_type_rate.vid = rate_node.vid
			WHERE content_type_rate.field_rate_firm_nid = '%d'";
		$args = array($nid);
		$result = db_query($query, $args);
		$nids = array();
		while ($item = db_fetch_array($result)) {
			$nids[] = $item['nid'];
		}
		statsbytime_setcurrentrate($nids); // Find and set the most current rate
	}
}


/**
 * Update/Create statistics for all records associated with a specific filing
 */
function statsbytime_update_filing($nid) {
	if ($nid > 0) {
		/* find all the individuals related to this filing */
		$query = "
			SELECT DISTINCT(individual_node.nid) as nid
			FROM {node} individual_node RIGHT OUTER JOIN {content_type_rate} rate_data ON individual_node.nid = rate_data.field_rate_individual_nid
			WHERE rate_data.field_rate_filing_nid = '%d'";
		$args = array($nid);
		$result = db_query($query, $args);
		$nids = array();
		while ($item = db_fetch_array($result)) {
			$nids[] = $item['nid'];
		}
		statsbytime_generate_stats($nids); // Generate new statistics.
		statsbytime_setcurrentrate($nids); // Find and set the most current rate
	}
}


/**
 * Update/Create statistics for all records associated with a specific individual
 */
function statsbytime_update_individual($nid) {
	if ($nid > 0) {
		statsbytime_generate_stats(array($nid)); // Generate new statistics.
		statsbytime_setcurrentrate(array($nid)); // Find and set the most current rate
	}
}


/**
 * Modify views to include additional fields based on the last 3 years
 */

function statsbytime_views_query_alter(&$view, &$query){
	if ($view->name == 'stats_ms3y') {
		$previousyear = date('Y',strtotime('-2 year'));
		$currentyear = date('Y',strtotime('-0 year'));

		$whereclause = "(SELECT COUNT(*)
FROM content_type_rate rate_content INNER JOIN node rate_node ON rate_content.vid = rate_node.vid
				 INNER JOIN node individual_node ON individual_node.nid = rate_content.field_rate_individual_nid
                 INNER JOIN node filing_node ON filing_node.nid = rate_content.field_rate_filing_nid
				 INNER JOIN content_type_filing filing_content ON filing_content.vid = filing_node.vid
                 WHERE individual_node.nid = node.nid
		AND (
		DATE_FORMAT
		(STR_TO_DATE(filing_content.field_case_feeappdates_value2,'%%Y-%%m-%%dT%%T'),'%%Y')
		) BETWEEN '" . $previousyear . "' AND '" . $currentyear . "') > 0";
		$query->add_where(0, $whereclause );

	}

	if ($view->name == 'stats_ms3y' && $view->current_display == 'feed_1'){
		//Let's examine the where clause
		$foundkey = -1;
		$neededstring = '';
		if (!empty($query->where)) {
			$currentWhere = $query->where;
			//All the where info
			$matches = 0;
			foreach ($currentWhere as $whereKey => $whereFilters) {
				//Clause layer
				if (!empty($whereFilters['clauses'])){
					$currentClause = $whereFilters['clauses'];

					//We need to see if there are 3, if not we will add them
					foreach ($currentClause as $clauseKey => $clauseValue){
						if (strpos($clauseValue,'node_data_field_individual_pa1.field_individual_pa1_value') !== false){
							$matches++;
							$foundkey = $whereKey;
							$neededstring = $clauseValue;
						}

						if (strpos($clauseValue,'node_data_field_individual_pa2.field_individual_pa2_value') !== false){
							$matches++;
						}

						if (strpos($clauseValue,'node_data_field_individual_pa3.field_individual_pa3_value') !== false){
							$matches++;
						}
					}
				}
			}

			if ($matches == 1 && $foundkey != -1){
				//Let's create the where array we want to add
				$clauses = array();
				$clauses[0] = $neededstring;

				$fixedclause01_part_one = str_replace('field_individual_pa1_value','field_individual_pa2_value',$neededstring);
				$fixedclause01_part_two = str_replace('field_individual_pa1','field_individual_pa2',$fixedclause01_part_one);
				$clauses[1] = $fixedclause01_part_two;

				$fixedclause02_part_one = str_replace('field_individual_pa1_value','field_individual_pa3_value',$neededstring);
				$fixedclause02_part_two = str_replace('field_individual_pa1','field_individual_pa3',$fixedclause02_part_one);
				$clauses[2] = $fixedclause02_part_two;

				$currentArgs = $currentWhere[$foundkey]['args'];
				$args = array();
				for ($x = 0; $x < 9; $x++){
					foreach ($currentArgs as $singleArgs){
						$args[] = $singleArgs;
					}
				}

				$type = $currentWhere[$foundkey]['type'];

				$newWhere = array();
				$newWhere['clauses'] = $clauses;
				$newWhere['args'] = $args;
				$newWhere['type'] = $type;

				$query->where[$foundkey] = $newWhere;

				//Add 2 tables to table_queue
				$pa2 = array();

				$pa2['table'] = 'node_data_field_individual_pa2';
				$pa2['num'] = 1;
				$pa2['alias'] = 'node_data_field_individual_pa2';
				$pa2['join'] = new views_join();
				$pa2['join']->definition = array();
				$pa2['join']->definition['table'] = 'content_type_individual';
				$pa2['join']->definition['left_field'] = 'vid';
				$pa2['join']->definition['field'] = 'vid';
				$pa2['join']->definition['left_table'] = 'node';
				$pa2['join']->extra_type = 'AND';
				$pa2['join']->table = 'content_type_individual';
				$pa2['join']->left_table = 'node';
				$pa2['join']->left_field = 'vid';
				$pa2['join']->field = 'vid';
				$pa2['join']->type = 'LEFT';
				$pa2['join']->adjusted = '1';
				$pa2['relationship'] = 'node';

				$pa3 = array();

				$pa3['table'] = 'node_data_field_individual_pa3';
				$pa3['num'] = 1;
				$pa3['alias'] = 'node_data_field_individual_pa3';
				$pa3['join'] = new views_join();
				$pa3['join']->definition = array();
				$pa3['join']->definition['table'] = 'content_type_individual';
				$pa3['join']->definition['left_field'] = 'vid';
				$pa3['join']->definition['field'] = 'vid';
				$pa3['join']->definition['left_table'] = 'node';
				$pa3['join']->extra_type = 'AND';
				$pa3['join']->table = 'content_type_individual';
				$pa3['join']->left_table = 'node';
				$pa3['join']->left_field = 'vid';
				$pa3['join']->field = 'vid';
				$pa3['join']->type = 'LEFT';
				$pa3['join']->adjusted = '1';
				$pa3['relationship'] = 'node';

				$query->table_queue['node_data_field_individual_pa2'] = $pa2;
				$query->table_queue['node_data_field_individual_pa3'] = $pa3;
			}
		}
	}
}

function statsbytime_views_pre_view(&$view, &$display_id, &$args) {
	// Unfortunately we need to duplicate this code. The Saved Searches require the $display_id be used while the Summary Stats download wants everything to use "default"
	if ($view->name == 'stats_ms3y') {
		$columns = array (
			'0' => array(
				'field' => 'field_rate_hourly',
				'name' => 'Actual Rate',
				'suffix' => '',
			),
			'1' => array(
				'field' => 'field_rate_standard',
				'name' => 'Standard Rate',
				'suffix' => '_1',
			),
		);
		$counter = 1;
		for ($i = variable_get('statsbytime_yearsdisplay', ''); $i + 3 > variable_get('statsbytime_yearsdisplay', ''); $i--) {
			foreach($columns as $col) {
				$view->display['default']->handler->options['fields'][$i . '_stat_max' . $col['suffix']] = array(
					'label' => $i . ' ' . $col['name'],
					'alter' => array(
						'alter_text' => 1,
						'text' => '['.$i.'_stat_max' . $col['suffix'] . ']',
						'make_link' => 0,
						'path' => '',
						'link_class' => '',
						'alt' => '',
						'prefix' => '',
						'suffix' => '',
						'target' => '',
						'help' => '',
						'trim' => 0,
						'max_length' => '',
						'word_boundary' => 1,
						'ellipsis' => 1,
						'html' => 0,
						'strip_tags' => 0,
					),
					'empty' => '',
					'hide_empty' => 1,
					'empty_zero' => 1,
					'exclude' => 0,
					'id' => $i . '_stat_max' . $col['suffix'],
					'table' => 'vw_' . $i . '_' . $col['field'],
					'field' => $i . '_stat_max',
					'relationship' => 'none',
				);
				$view->display['default']->handler->options['style_options']['columns'][$i . '_stat_max' . $col['suffix']] = $i . '_stat_max' . $col['suffix'];
				$view->display['default']->handler->options['style_options']['info'][$i . '_stat_max' . $col['suffix']] = array(
					'sortable' => 1,
					'separator' => '',
				);
				if ($counter == 1) {
					$view->display['default']->handler->options['style_options']['default'] = $i . '_stat_max' . $col['suffix']; // Set the default sort order
					$view->display['default']->handler->options['style_options']['order'] = 'desc';
				}
				$counter++;
			}
		}
	} elseif (strstr($view->name,'ms3y')) {
		$columns = array (
			'0' => array(
				'field' => 'field_rate_hourly',
				'name' => 'Actual Rate',
				'suffix' => '',
			),
			'1' => array(
				'field' => 'field_rate_standard',
				'name' => 'Standard Rate',
				'suffix' => '_1',
			),
		);
		$counter = 1;
		for ($i = variable_get('statsbytime_yearsdisplay', ''); $i + 3 > variable_get('statsbytime_yearsdisplay', ''); $i--) {
			foreach($columns as $col) {
				$view->display[$display_id]->handler->options['fields'][$i . '_stat_max' . $col['suffix']] = array(
					'label' => $i . ' ' . $col['name'],
					'alter' => array(
						'alter_text' => 1,
						'text' => '['.$i.'_stat_max' . $col['suffix'] . ']',
						'make_link' => 0,
						'path' => '',
						'link_class' => '',
						'alt' => '',
						'prefix' => '',
						'suffix' => '',
						'target' => '',
						'help' => '',
						'trim' => 0,
						'max_length' => '',
						'word_boundary' => 1,
						'ellipsis' => 1,
						'html' => 0,
						'strip_tags' => 0,
					),
					'empty' => '',
					'hide_empty' => 1,
					'empty_zero' => 1,
					'exclude' => 0,
					'id' => $i . '_stat_max' . $col['suffix'],
					'table' => 'vw_' . $i . '_' . $col['field'],
					'field' => $i . '_stat_max',
					'relationship' => 'none',
				);
				$view->display[$display_id]->handler->options['style_options']['columns'][$i . '_stat_max' . $col['suffix']] = $i . '_stat_max' . $col['suffix'];
				$view->display[$display_id]->handler->options['style_options']['info'][$i . '_stat_max' . $col['suffix']] = array(
					'sortable' => 1,
					'separator' => '',
				);
				if ($counter == 1) {
					$view->display[$display_id]->handler->options['style_options']['default'] = $i . '_stat_max' . $col['suffix']; // Set the default sort order
					$view->display[$display_id]->handler->options['style_options']['order'] = 'desc';
				}
				$counter++;
			}
		}
	}
}



/**
 * Format statistic output with the proper currency format
 */
function statsbytime_views_pre_render(&$view) {
	if(strstr($view->name,'ms3y')) {
		foreach($view->result as $index) {
			foreach($index as $key => $data) {
				if (strstr($key,'stat_max')) {
					if (empty($data)){
						$data = '0.00';
					}
					if ($data == '0.00') {
						$index->$key = '';
					} else {
						$index->$key = '$' . $data;
					}
				}
			}
		}
	}
}