<?php


/**
 * Implements computed field hook().
 * 
 * $entity_type_manager: The entity type manager.
 * $entity: The entity the field belongs to.
 * $fields: The list of fields available in this entity.
 * $delta: Current index of the field in case of multi-value computed fields (counting from 0).
 * $value: The resulting value to be set above, or returned in your hook implementation).
 * 
 * Code copied from original calculated field, modified to use object oriented syntax
 * 
 */

setlocale(LC_MONETARY, 'en_US');

/**
 * Total
 * field_vp_rate_total
 * 
 * @return decimal $value
 */
function computed_field_field_vp_rate_total_compute($entity_type_manager, $entity, $fields, $delta) {

  if ($entity->field_vp_rate_hourly->value && $entity->field_vp_rate_hours->value) {
    $value = $entity->field_vp_rate_hourly->value * $entity->field_vp_rate_hours->value;
    return money_format('%n', $value);
  }
  return 0;
}

/**
 * Primary Fee
 * field_vp_rate_primaryfee_calc
 * 
 * @return decimal $value
 */

function computed_field_field_vp_rate_primaryfee_calc_compute($entity_type_manager, $entity, $fields, $delta) {

  if ($entity->field_vp_rate_flat_fee->value && $entity->field_vp_rate_flat_fee->value > 0) {
    $value = $entity->field_vp_rate_flat_fee->value;
  } elseif ($entity->field_vp_rate_retainer->value && $entity->field_vp_rate_retainer->value > 0) {
    $value = $entity->field_vp_rate_retainer->value;
  } elseif ($entity->field_vp_rate_transactional_fee->value && $entity->field_vp_rate_transactional_fee->value > 0) {
    $value = $entity->field_vp_rate_transactional_fee->value;
  } elseif ($entity->field_vp_rate_success_fee->value && $entity->field_vp_rate_success_fee->value > 0) {
    $value = $entity->field_vp_rate_success_fee->value;
  } elseif ($entity->field_vp_rate_total_fees->value && $entity->field_vp_rate_total_fees->value > 0) {
    $value = $entity->field_vp_rate_total_fees->value;
  } else {
    $value = 0;
  }

  return $value;
}

/**
 * Total Fees (Calculated)
 * field_vp_rate_total_fees_calc
 * 
 * @return decimal $value
 */
function computed_field_field_vp_rate_total_fees_calc_compute($entity_type_manager, $entity, $fields, $delta) {

  if ($entity->field_vp_rate_flat_fee->value || 
      $entity->field_vp_rate_retainer->value || 
      $entity->field_vp_rate_transactional_fee->value ||
      $entity->field_vp_rate_success_fee->value) {

    $value = $entity->field_vp_rate_flat_fee->value + 
             $entity->field_vp_rate_retainer->value + 
             $entity->field_vp_rate_transactional_fee->value + 
             $entity->field_vp_rate_success_fee->value;
  } else {
    $value = 0;
  }

  return money_format('%n',$value);
}

/**
 * Standard Rate
 * field_vp_rate_standard
 * 
 * @return decimal $value
 */
function computed_field_field_vp_rate_standard_compute($entity_type_manager, $entity, $fields, $delta) {

  if ($entity->field_vp_rate_hourly->value) {

    if ($entity->field_vp_rate_discount->value) {

      if (is_numeric($entity->field_vp_rate_discount->value) && $entity->field_vp_rate_discount->value > 0) {
        $discount = 1 - ($entity->field_vp_rate_discount->value / 100);
        return $entity->field_vp_rate_hourly->value / $discount;
      }

    }

    else {
      if (is_numeric($entity->field_vp_rate_discount->value)) {
        return $entity->field_vp_rate_hourly->value;
      }
    }

  }

  return 0;

}

/**
 * Primary Fee Type
 * field_vp_rate_primaryfeetypecalc
 * 
 * @return string $value
 */
function computed_field_field_vp_rate_primaryfeetypecalc_compute($entity_type_manager, $entity, $fields, $delta) {

  if ($entity->field_vp_rate_flat_fee->value && $entity->field_vp_rate_flat_fee->value > 0) {
    $value= 'Flat Fee';
  } elseif ($entity->field_vp_rate_retainer->value && $entity->field_vp_rate_retainer->value > 0) {
    $value = 'Retainer';
  } elseif ($entity->field_vp_rate_transactional_fee->value && $entity->field_vp_rate_transactional_fee->value > 0) {
    $value = 'Transaction Fee';
  } elseif ($entity->field_vp_rate_success_fee->value && $entity->field_vp_rate_success_fee->value > 0) {
    $value= 'Success Fee';
  } elseif ($entity->field_vp_rate_total_fees->value && $entity->field_vp_rate_total_fees->value > 0) {
    $value = 'Total Fee';
  } else {
    $value= '';
  }
  return $value;

}

/**
 * Record Type
 * field_vp_rate_record_type
 * 
 * @return string $value
 */
function computed_field_field_vp_rate_record_type_compute($entity_type_manager, $entity, $fields, $delta) {

  $value = [];

  if ($entity->field_vp_rate_hourly->value && $entity->field_vp_rate_hourly->value > 0) {
    $value[] = 'Rate';
  }

  if (($entity->field_vp_rate_flat_fee->value && $entity->field_vp_rate_flat_fee->value > 0) ||
      ($entity->field_vp_rate_retainer->value && $entity->field_vp_rate_retainer->value > 0) ||
      ($entity->field_vp_rate_transactional_fee->value && $entity->field_vp_rate_transactional_fee->value > 0) ||
      ($entity->field_vp_rate_success_fee->value && $entity->field_vp_rate_success_fee->value > 0) ||
      ($entity->field_vp_rate_total_fees->value && $entity->field_vp_rate_total_fees->value > 0)) {
      $value[] = 'Fee';
  }
  if (count($value)) {
      $value = implode(' and ',$value);
  } else {
      $value = '';
  }

  return $value;
}

/**
 * Fees Listed
 * field_vp_rate_fees_listed_calc
 * 
 * @return string $value
 */
function computed_field_field_vp_rate_fees_listed_calc_compute($entity_type_manager, $entity, $fields, $delta) {

  $list = [];

  if ($entity->field_vp_rate_flat_fee->value || 
      $entity->field_vp_rate_retainer->value || 
      $entity->field_vp_rate_transactional_fee->value || 
      $entity->field_vp_rate_success_fee->value) {

      if ($entity->field_vp_rate_flat_fee->value && $entity->field_vp_rate_flat_fee->value > 0) {
          $list[] = 'Flat Fee';
      }
      if ($entity->field_vp_rate_retainer->value && $entity->field_vp_rate_retainer->value > 0) {
          $list[] = 'Retainer';
      }
      if ($entity->field_vp_rate_transactional_fee->value && $entity->field_vp_rate_transactional_fee->value > 0) {
          $list[] = 'Transactional Fee';
      }
      if ($entity->field_vp_rate_success_fee->value && $entity->field_vp_rate_success_fee->value > 0) {
          $list[] = 'Success Fee';
      }
  }

  if (count($list)) {
    return implode(', ',$list);
  }
  
  return '';

}



/**
 * Previous year's rate
 * field_vp_rate_previous
 * 
 * Previous year's rate calculated from a view 
 * 
 * @return float $value
 */
function computed_field_field_vp_rate_previous_compute($entity_type_manager, $entity, $fields, $delta) {

  $individual = $fields['field_vp_rate_individual'][0]['target_id'];

  $filing = $fields['field_vp_rate_filing'][0]['target_id'];


  $sql = 'SELECT field_vp_filing_fee_dates_value
          FROM node__field_vp_filing_fee_dates
          WHERE entity_id = :eid';

  $params = [':eid' => $filing];
  $results = db_query($sql, $params)->fetchCol();


  // Get only the year from the result string, first 4 characters
  $year = substr($results[0], 0, 4);


  return vp_computed_fields_previous_rate($year, $individual);


}

  /**
   * Get the latest rate from a user from last year
   */
  function vp_computed_fields_previous_rate($year, $individual) {

   // Get the last year
   $year = $year - 1;

   // Set the view arguments, the year and individual id
   $args = [$year, $individual];

   // Get the specific view
   $view = \Drupal\views\Views::getView('search_rates_by_single_individual');

   // Pass the arguments
   $view->setArguments($args);

   // Execute
   $view->execute();

   // If there are results, return the hourly rate
   if ($view->result) {
     $node = $view->result[0]->_entity;
     $rate = $node->get('field_vp_rate_hourly')->getValue()[0]['value'];
     return $rate;
   }

   // Else, return default value
   return 0;

 }