<?php

/**
 * @file
 * Common Valeo Partners methods used by modules in the site.
 */

use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_node_insert().
 *
 * Runs code when a particular content type is created.
 */
function vp_api_node_insert(NodeInterface $node) {

  if ($node->getType() == 'vp_type_rate') {

    /*
     * This is a new rate. Make sure the individual who is assigned to this rate
     * has a paragraph entry for their rate year/actual rate.
     */

    // Get the individual associated with this rate.
    $individual_id = $node->get('field_vp_rate_individual')->getValue()[0]['target_id'];
    $individual = Node::load($individual_id);

    // Get the filing associated with this rate.
    $filing_id = $node->get('field_vp_rate_filing')->getValue()[0]['target_id'];
    $filing = Node::load($filing_id);

    // Get the filing year.
    $filing_year = $filing->get('field_vp_filing_year')->getValue()[0]['value'];

    // Create the paragraph data with the filing year.
    $paragraph_data = [
      'type' => 'actual_rate_by_year',
      'field_paragraph_actual_rate_year' => (string) $filing_year,
      'field_paragraph_actual_rate' => 0,
    ];

    // Create a new paragraph object.
    $new_paragraph = Paragraph::create($paragraph_data);
    $new_paragraph->save();
    $paragraphs = ['target_id' => $new_paragraph->Id(), 'target_revision_id' => $new_paragraph->getRevisionId()];

    // Assign to the paragraph on the user object and save.
    $individual->field_actual_rate_by_year[] = $paragraphs;
    $individual->save();

  }

  if ($node->getType() == 'vp_type_individual') {

    /*
     * This is a new individual. Create the last 5 years of rates
     * as place holders.
     */

    // Get current year.
    $year = format_date(time(), 'custom', 'Y');

    // Create paragraph entries for the last 5 years of rates.
    for ($x = $year; $x >= $year - 5; $x--) {

      $paragraph_data = [
        'type' => 'actual_rate_by_year',
        'field_paragraph_actual_rate_year' => (string) $x,
        'field_paragraph_actual_rate' => 0,
      ];

      $new_paragraph = Paragraph::create($paragraph_data);
      $new_paragraph->save();
      $paragraphs[] = ['target_id' => $new_paragraph->Id(), 'target_revision_id' => $new_paragraph->getRevisionId()];
    }

    // Add the paragraphs.
    $node->field_actual_rate_by_year = $paragraphs;
    $node->save();
  }

}

/**
 * Function to Generate minimum year dropdowns.
 */
function vp_api_year_options_min() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 2000; $x <= $year + 10; $x++) {
    // Make a date string based on year plus December 31.
    $long_date = $x . '-01-01';
    // Make an options array in the form of value="2010-01-01" key="2010".
    $options[$long_date] = $x;
  }

  return $options;
}

/**
 * Function to Generate maximum year dropdowns.
 */
function vp_api_year_options_max() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 2000; $x <= $year + 10; $x++) {
    // Make a date string based on year plus December 31.
    $long_date = $x . '-12-31';
    // Make an options array in the form of value="2010-12-31" key="2010".
    $options[$long_date] = $x;
  }

  return $options;
}

/**
 * Function to Generate maximum year dropdowns.
 */
function vp_api_bar_grad_year_options() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 1950; $x <= $year; $x++) {
    $options[$x] = $x;
  }

  return $options;
}

/**
 * Return a list of vocabulary terms to create a dropdown.
 */
function vp_api_get_vocabulary_terms($vocabulary) {

  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vocabulary);
  $x = 0;

  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
    $x++;
  }

  return $options;
}
