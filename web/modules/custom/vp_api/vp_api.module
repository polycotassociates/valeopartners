<?php

/**
 * @file
 * Common Valeo Partners methods used by modules in the site.
 */

use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_node_update().
 *
 * Runs code when a particular content type is updated.
 */
function vp_api_node_update(NodeInterface $node) {

  // Resave Individual on rate modification.
  // This runs the computed fields again for the Individual type.
  if ($node->getType() == 'vp_type_rate') {
    $individual_id = $node->get('field_vp_rate_individual')->getValue() ? $node->get('field_vp_rate_individual')->getValue()[0]['target_id'] : NULL;
    if ($individual_id) {
      $individual = Node::load($individual_id);
      if ($individual) {
        $individual->save();
      }
    }
  }

}

/**
 * Implements hook_node_insert().
 *
 * Runs code when a particular content type is created.
 */
function vp_api_node_insert(NodeInterface $node) {

  // Resave Individual on rate insert.
  // This runs the computed fields again for the Individual type.
  if ($node->getType() == 'vp_type_rate') {
    $individual_id = $node->get('field_vp_rate_individual')->getValue() ? $node->get('field_vp_rate_individual')->getValue()[0]['target_id'] : NULL;
    if ($individual_id) {
      $individual = Node::load($individual_id);
      if ($individual) {
        $individual->save();
      }
    }
  }

}


/**
 * Implements hook_entity_presave().
 *
 * Sets values on entity during presave.
 */
function vp_api_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {

    case 'vp_type_individual':
      // Get the entity id.
      $id = $entity->id();
      // Get the most recent employer id.
      $employer_id = vp_api_get_most_recent_employer($id);
      // Set the new employer value.
      if ($employer_id) {
        $entity->set('field_most_recent_firm', $employer_id);
      }
      // Get the most recent client id.
      $client_id = vp_api_get_most_recent_client($id);
      // Set the new client value.
      if ($client_id) {
        $entity->set('field_most_recent_client', $client_id);
      }
      // Get the most recent position id.
      $position_id = vp_api_get_most_recent_position($id);
      // Set the new position value.
      if ($position_id) {
        $entity->set('field_vp_position', $position_id);
      }
      break;
  }
}


/**
 * Function to Generate rate year only field dropdown values.
 */
function vp_api_year_options_year_only() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 2000 to this year + 10.
  for ($x = 2000; $x <= $year + 10; $x++) {
    $options[$x] = $x;
  }

  return $options;
}

/**
 * Function to Generate minimum year dropdowns.
 */
function vp_api_year_options_min() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 2000; $x <= $year + 10; $x++) {
    // Make a date string based on year plus December 31.
    $long_date = $x . '-01-01';
    // Make an options array in the form of value="2010-01-01" key="2010".
    $options[$long_date] = $x;
  }

  return $options;
}

/**
 * Function to Generate maximum year dropdowns.
 */
function vp_api_year_options_max() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 2000; $x <= $year + 10; $x++) {
    // Make a date string based on year plus December 31.
    $long_date = $x . '-12-31';
    // Make an options array in the form of value="2010-12-31" key="2010".
    $options[$long_date] = $x;
  }

  return $options;
}

/**
 * Function to Grad Date dropdowns.
 */
function vp_api_bar_grad_year_options() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 1950; $x <= $year; $x++) {
    $options[$x] = $x;
  }

  return $options;
}

/**
 * Return a list of vocabulary terms to create a dropdown.
 */
function vp_api_get_vocabulary_terms($vocabulary) {

  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vocabulary);
  $x = 0;

  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
    $x++;
  }

  return $options;
}


/**
 * Implements hook_mail().
 */
function vp_api_mail($key, &$message, $params) {
  $options = ['langcode' => $message['langcode']];

  switch ($key) {
    case 'report_downloaded':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Valeo Website Report Downloaded');
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Send a mail on report download.
 */
function vp_api_report_send($uid = FALSE, $uri = FALSE, $time = FALSE) {

  // Check if the configuration setting "email_list_enable" is TRUE.
  if (\Drupal::config('vp_api.settings')->get('vp_api.report_email.email_list_enable')) {

    // User from $uid.
    $user = User::load($uid);
    // To retrieved from configuration settings.
    $to = \Drupal::config('vp_api.settings')->get('vp_api.report_email.emails');
    // User ID.
    $name = $user->get('name')->value;
    // Date.
    $date = format_date($time, 'custom', 'm/j/Y g:i a');
    // Email body.
    $params['message'] = "Report generated by user: $name \n
At: $date \n
Report Link: \n
$uri ";

    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'vp_api';
    $key = 'report_downloaded';
    $langcode = 'en';
    $send = TRUE;
    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== TRUE) {
      \Drupal::logger('vp_api')->error("Email error, message not sent.");
    }
    else {
      \Drupal::logger('vp_api')->notice("Report downloaded, email sent.");
    }

  }

}

/**
 * Various cron tasks.
 */
function vp_api_cron() {

  // Load the database export code.
  module_load_include('inc', 'vp_api', 'cron/vp_cron_generate_new_record_email');
  // Run export.
  vp_api_cron_generate_daily_new_record_email();
}

/**
 * Get the latest firm ID for a person from their most recent rate.
 */
function vp_api_get_most_recent_employer($id) {

  // Do a database query for the most recent rate
  // for an individual with firm.
  // Order by most recent filing.
  $db = \Drupal::database();

  $query = $db->select('node_field_data', 'node');
  $query->fields('node', ['nid', 'type', 'status']);
  $query->condition('node.type', 'vp_type_rate', '=');
  $query->join('node__field_vp_rate_individual', 'individual', 'node.nid = individual.entity_id');
  $query->join('node__field_vp_rate_filing', 'filing', 'node.nid = filing.entity_id');
  $query->join('node__field_vp_filing_fee_dates', 'dates', 'dates.entity_id = filing.field_vp_rate_filing_target_id');
  $query->join('node__field_vp_rate_firm', 'firm', 'node.nid = firm.entity_id');
  $query->fields('individual', ['field_vp_rate_individual_target_id']);
  $query->fields('node', ['nid']);
  $query->fields('dates', ['field_vp_filing_fee_dates_end_value']);
  $query->fields('firm', ['field_vp_rate_firm_target_id']);
  $query->orderBy('field_vp_filing_fee_dates_end_value', 'DESC');
  $query->condition('field_vp_rate_individual_target_id', $id, '=');
  $query->range(0, 1);
  $result = $query->execute()->fetchAll();

  if ($result) {
    $firm = $result[0]->field_vp_rate_firm_target_id;
    return $firm;
  }
}

/**
 * Get the latest client ID for a person from their most recent rate.
 */
function vp_api_get_most_recent_client($id) {

  // Do a database query for the most recent rate
  // for an individual with company.
  // Order by most recent filing.
  $db = \Drupal::database();

  $query = $db->select('node_field_data', 'node');
  $query->fields('node', ['nid', 'type', 'status']);
  $query->condition('node.type', 'vp_type_rate', '=');
  $query->join('node__field_vp_rate_individual', 'individual', 'node.nid = individual.entity_id');
  $query->join('node__field_vp_rate_filing', 'filing', 'node.nid = filing.entity_id');
  $query->join('node__field_vp_filing_fee_dates', 'dates', 'dates.entity_id = filing.field_vp_rate_filing_target_id');
  $query->join('node__field_vp_rate_company', 'company', 'node.nid = company.entity_id');
  $query->fields('individual', ['field_vp_rate_individual_target_id']);
  $query->fields('node', ['nid']);
  $query->fields('dates', ['field_vp_filing_fee_dates_end_value']);
  $query->fields('company', ['field_vp_rate_company_target_id']);
  $query->orderBy('field_vp_filing_fee_dates_end_value', 'DESC');
  $query->condition('field_vp_rate_individual_target_id', $id, '=');
  $query->range(0, 1);
  $result = $query->execute()->fetchAll();

  if ($result) {
    $company = $result[0]->field_vp_rate_company_target_id;
    return $company;
  }
}

/**
 * Get the latest client ID for a person from their most recent position.
 */
function vp_api_get_most_recent_position($id) {

  // Do a database query for the most recent rate for an
  // individual with position.
  // Order by most recent filing.
  $db = \Drupal::database();

  $query = $db->select('node_field_data', 'node');
  $query->fields('node', ['nid', 'type', 'status']);
  $query->condition('node.type', 'vp_type_rate', '=');
  $query->join('node__field_vp_rate_individual', 'individual', 'node.nid = individual.entity_id');
  $query->join('node__field_vp_rate_filing', 'filing', 'node.nid = filing.entity_id');
  $query->join('node__field_vp_filing_fee_dates', 'dates', 'dates.entity_id = filing.field_vp_rate_filing_target_id');
  $query->join('node__field_vp_rate_position', 'position', 'node.nid = position.entity_id');
  $query->fields('individual', ['field_vp_rate_individual_target_id']);
  $query->fields('node', ['nid']);
  $query->fields('dates', ['field_vp_filing_fee_dates_end_value']);
  $query->fields('position', ['field_vp_rate_position_target_id']);
  $query->orderBy('field_vp_filing_fee_dates_end_value', 'DESC');
  $query->condition('field_vp_rate_individual_target_id', $id, '=');
  $query->range(0, 1);
  $result = $query->execute()->fetchAll();

  if ($result) {
    $position = $result[0]->field_vp_rate_position_target_id;
    return $position;
  }
}

/**
 * Implements hook_token_info().
 *
 * Create a token group and token for last updated master spreadsheet.
 */
function vp_api_token_info() {
  $info = [];
  $info['types']['vp_tokens'] = ['name' => t('VP Tokens'), 'description' => t('Tokens for Valeo Partners')];
  $info['tokens']['vp_tokens']['vp_token_last_updated_sheet'][] = 'A token to that returns the last created date for the drush generated master sheet.';
  return $info;
}

/**
 * Implements hook_tokens().
 */
function vp_api_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'vp_tokens') {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'vp_token_last_updated_sheet':
          // Get the configuration settings.
          $config = \Drupal::service('config.factory')->getEditable('vp_api.settings');
          $replacements[$original] = $config->get('vp_api.full_report_time.date') ? $config->get('vp_api.full_report_time.date') : '--/--/----';
          break;
      }
    }
  }
  return $replacements;
}
