<?php

/**
 * @file
 * Common Valeo Partners methods used by modules in the site.
 */

use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_node_update().
 *
 * Runs code when a particular content type is updated.
 */
function vp_api_node_update(NodeInterface $node) {

  // Resave Individual on rate modification.
  // This runs the computed fields again for the Individual type.
  if ($node->getType() == 'vp_type_rate') {
    $individual_id = $node->get('field_vp_rate_individual')->getValue() ? $node->get('field_vp_rate_individual')->getValue()[0]['target_id'] : NULL;
    if ($individual_id) {
      $individual = Node::load($individual_id);
      if ($individual) {
        $individual->save();
      }
    }
  }

}

/**
 * Implements hook_node_insert().
 *
 * Runs code when a particular content type is created.
 */
function vp_api_node_insert(NodeInterface $node) {

  // Resave Individual on rate insert.
  // This runs the computed fields again for the Individual type.
  if ($node->getType() == 'vp_type_rate') {
    $individual_id = $node->get('field_vp_rate_individual')->getValue() ? $node->get('field_vp_rate_individual')->getValue()[0]['target_id'] : NULL;
    if ($individual_id) {
      $individual = Node::load($individual_id);
      if ($individual) {
        $individual->save();
      }
    }
  }

}

/**
 * Implements hook_node_presave().
 *
 * Runs code when a particular content type is created.
 */
function vp_api_node_presave($node) {

  // Update Individual field Most Recent Firm.
  if ($node->getType() == 'vp_type_individual') {
    $id = $node->id();

    $employer_id = vp_api_get_most_recent_employer($id);

    if ($employer_id) {
      $node->field_most_recent_firm[] = $employer_id;
    }
  }

}

/**
 * Function to Generate minimum year dropdowns.
 */
function vp_api_year_options_min() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 2000; $x <= $year + 10; $x++) {
    // Make a date string based on year plus December 31.
    $long_date = $x . '-01-01';
    // Make an options array in the form of value="2010-01-01" key="2010".
    $options[$long_date] = $x;
  }

  return $options;
}

/**
 * Function to Generate maximum year dropdowns.
 */
function vp_api_year_options_max() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 2000; $x <= $year + 10; $x++) {
    // Make a date string based on year plus December 31.
    $long_date = $x . '-12-31';
    // Make an options array in the form of value="2010-12-31" key="2010".
    $options[$long_date] = $x;
  }

  return $options;
}

/**
 * Function to Grad Date dropdowns.
 */
function vp_api_bar_grad_year_options() {

  $options = [];
  // Get the current year.
  $year = format_date(time(), 'custom', 'Y');

  // Loop through years from 1950 to this year + 10.
  for ($x = 1950; $x <= $year; $x++) {
    $options[$x] = $x;
  }

  return $options;
}

/**
 * Return a list of vocabulary terms to create a dropdown.
 */
function vp_api_get_vocabulary_terms($vocabulary) {

  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vocabulary);
  $x = 0;

  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
    $x++;
  }

  return $options;
}

// /**
//  * Return a list of vocabulary terms to create a dropdown.
//  */
// function vp_api_mail_query($email, $querystring) {

//   drupal_mail('example', 'notice', $account->mail, user_preferred_language($account), $params);

// }

/**
 * Various cron tasks.
 */
function vp_api_cron() {

  // Load the database export code.
  module_load_include('inc', 'vp_api', 'cron/vp_cron_generate_xls_export');
  // Run export.
  vp_api_cron_export_xls();
}

/**
 * Get the latest firm ID for a person from their most recent rate.
 */
function vp_api_get_most_recent_employer($id) {

  // Do a database query for the most recent rate for an individual.
  $db = \Drupal::database();

  $query = $db->select('node_field_data', 'node');
  $query->fields('node', ['nid', 'type', 'status']);
  $query->condition('node.type', 'vp_type_rate', '=');
  $query->join('node__field_vp_rate_individual', 'individual', 'node.nid = individual.entity_id');
  $query->join('node__field_vp_rate_filing', 'filing', 'node.nid = filing.entity_id');
  $query->join('node__field_vp_filing_year_end', 'year', 'year.entity_id = filing.field_vp_rate_filing_target_id');
  $query->join('node__field_vp_rate_firm', 'firm', 'node.nid = firm.entity_id');
  $query->fields('individual', ['field_vp_rate_individual_target_id']);
  $query->fields('node', ['nid']);
  $query->fields('year', ['field_vp_filing_year_end_value']);
  $query->fields('firm', ['field_vp_rate_firm_target_id']);
  $query->orderBy('field_vp_filing_year_end_value', 'DESC');
  $query->condition('field_vp_rate_individual_target_id', $id, '=');
  $query->range(0, 1);
  $result = $query->execute()->fetchAll();

  if ($result) {
    $firm = $result[0]->field_vp_rate_firm_target_id;
    return $firm;
  }
}
