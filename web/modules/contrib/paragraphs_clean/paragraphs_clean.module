<?php

/**
 * @file
 * Paragraphs clean module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_entity_update().
 *
 * When form updates, delete any paragraph entities that were removed.
 */
function paragraphs_clean_entity_update(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityFieldManager $fieldManager */
  $fieldManager = \Drupal::service('entity_field.manager');
  $parentEntities = $fieldManager->getFieldMapByFieldType('entity_reference_revisions');

  if (!array_key_exists($entity->getEntityTypeId(), $parentEntities)) {
    return;
  }

  $field_definitions = [];
  foreach ($parentEntities[$entity->getEntityTypeId()] as $field_id => $settings) {
    if ($configField = FieldConfig::loadByName($entity->getEntityTypeId(), $entity->bundle(), $field_id)) {
      $field_definitions[] = $configField;
    }
  }

  if (empty($field_definitions)) {
    return;
  }

  // Loop through each field definition looking for paragraphs.
  foreach ($field_definitions as $field_definition) {
    // Check if a paragraph field with revisions.
    if ($field_definition->getSetting('target_type') != 'paragraph') {
      continue;
    }

    // Get field original ids.
    if ($entity->getOriginalId()) {
      $original_ids = array_column($entity->original->{$field_definition->getName()}->getValue(), 'target_id');
    }
    // If no original ids, skip field.
    if (empty($original_ids)) {
      continue;
    }

    // Get field new ids.
    $new_ids = array_column($entity->{$field_definition->getName()}->getValue(), 'target_id');

    // Flag original ids not in new ids for deletion.
    $delete_ids = array_diff($original_ids, $new_ids);

    // Delete flagged ids.
    if (!empty($delete_ids)) {
      $storage_handler = \Drupal::entityTypeManager()->getStorage('paragraph');
      $entities = $storage_handler->loadMultiple($delete_ids);
      $storage_handler->delete($entities);
    }
  }
}
