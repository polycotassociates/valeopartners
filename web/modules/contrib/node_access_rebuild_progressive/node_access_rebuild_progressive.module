<?php

/**
 * @file
 * Provides ability to rebuild node access silently.
 */

/**
 * Implements hook_cron().
 */
function node_access_rebuild_progressive_cron() {
  $config = \Drupal::config('node_access_rebuild_progressive.settings');
  // Not enabled on cron, nothing to do.
  if (!$config->get('cron')) {
    return;
  }
  // Trigger the processing.
  if (node_access_needs_rebuild()) {
    node_access_rebuild_progressive_trigger();
  }
  // Process a batch of nodes if needed.
  if (\Drupal::state()->get('node_access_rebuild_progressive.current') > 0) {
    node_access_rebuild_progressive_process_cron();
  }
}

/**
 * Initiate the full rebuild.
 */
function node_access_rebuild_progressive_trigger() {
  // Prevents default message/behaviour.
  node_access_needs_rebuild(FALSE);
  // Add default grants in the unlikely case
  // no modules implement node_grants anymore.
  if (!count(\Drupal::moduleHandler()->getImplementations('node_grants'))) {
    node_access_rebuild_progressive_set_default();
    return node_access_rebuild_progressive_finished();
  }
  // Clean up possible mismatches.
  db_query("DELETE FROM {node_access} WHERE nid NOT IN (SELECT nid FROM {node})");
  // We only need the current one, nodes created afterward would get processed
  // at save time.
  $highest = db_query("SELECT nid FROM {node} ORDER BY nid DESC LIMIT 0,1")->fetchField();
  $count = db_query("SELECT count(nid) FROM {node}")->fetchField();
  \Drupal::state()->set('node_access_rebuild_progressive.current', $highest + 1);
  \Drupal::logger('node_access_rebuild_progressive')->notice('%count nodes queued for node access rebuild.', array('%count' => $count));
}

function node_access_rebuild_progressive_set_default() {
  $access_control_handler = \Drupal::entityManager()->getAccessControlHandler('node');
  $access_control_handler->deleteGrants();
  $access_control_handler->writeDefaultGrant();
}

/**
 * Processes a chunk of nodes at cron run.
 */
function node_access_rebuild_progressive_process_cron() {
  $pass = node_access_rebuild_progressive_process_chunk();
  if (empty($pass['total'])) {
    return node_access_rebuild_progressive_finished();
  }
}

/**
 * Processes a chunk of nodes.
 * @return array
 *   An array with the following keys:
 *   - total: the number of nodes retrieved for processing.
 *   - processed: the number of nodes actually processed.
 */
function node_access_rebuild_progressive_process_chunk() {
  $current = \Drupal::state()->get('node_access_rebuild_progressive.current');
  $chunk_size = \Drupal::config('node_access_rebuild_progressive.settings')->get('chunk');
  $nids = db_query("SELECT nid FROM {node} WHERE nid < :current ORDER BY nid DESC LIMIT 0,$chunk_size", array(':current' => $current))->fetchCol();
  $total = count($nids);
  $processed = 0;
  if ($total) {
    $access_control_handler = \Drupal::entityManager()->getAccessControlHandler('node');
    $node_storage = \Drupal::entityManager()->getStorage('node');
    $node_storage->resetCache($nids);
    $nodes = $node_storage->loadMultiple($nids);
    foreach ($nodes as $node) {
      // Make sure the node can be loaded properly.
      if (!empty($node->id())) {
        $grants = $access_control_handler->acquireGrants($node);
        \Drupal::service('node.grant_storage')->write($node, $grants);
        $current = $node->id();
        $processed ++;
      }
    }
    \Drupal::state()->set('node_access_rebuild_progressive.current', $current);
  }
  return array(
    'total' => $total,
    'processed' => $processed,
  );
}

/**
 * Cleanup after queue completion.
 */
function node_access_rebuild_progressive_finished() {
  \Drupal::state()->set('node_access_rebuild_progressive.current', 0);
  \Drupal::logger('node_access_rebuild_progressive')->notice('Node access rebuild finished.', []);
}
