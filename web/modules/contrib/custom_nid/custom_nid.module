<?php

/**
 * Implements hook_form_alter().
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeForm;

function custom_nid_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  
  $form_object = $form_state->getFormObject();
  if ( ( $form_object instanceof NodeForm ) && \Drupal::currentUser()->hasPermission('custom_nid access') ) {
    $node_object = $form_object->getEntity();
    if( !isset( $node_object->nid->value ) ) {
      $form['custom_nid_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Nid'),
        '#default_value' => '',
        '#size' => 15,
        '#maxlength' => 15,
        '#weight' => -50,
        '#element_validate' => ['attach_custom_nid_field_to_node'],
      );
      $form['#validate'][] = 'custom_nid_form_validate';
    }
  }
}

/**
 * Form validate.
 */
function custom_nid_form_validate(&$form, FormStateInterface $form_state) {
  $custom_nid = $form_state->getValue('custom_nid_field');
  if( '' != $custom_nid ) {
    if( !is_numeric( $custom_nid ) ) {
      $form_state->setErrorByName('custom_nid_field', t("Nid is not numeric."));
    }
    $result = db_select('node', 'n')
    ->fields('n')
    ->condition('nid', $custom_nid,'=')
    ->execute()
    ->fetchAssoc();
    if( $result ) {
      $form_state->setErrorByName('custom_nid_field', t("Nid already exists."));
    }
  }
}

function attach_custom_nid_field_to_node( $element, FormStateInterface $form_state, $form ) {
  $node = $form_state->getFormObject()->getEntity();
  $node->custom_nid_field = $form_state->getValue('custom_nid_field');
}

/**
 * Implements hook_entity_presave().
 */
function custom_nid_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if( $entity->isNew() && $entity->getEntityTypeId() == 'node' ) {
    if ( '' != $entity->custom_nid_field && is_numeric( $entity->custom_nid_field ) ) {
      $entity->set('nid', $entity->custom_nid_field );
    }
  }
}