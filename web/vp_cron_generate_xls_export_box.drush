#!/usr/local/bin/drush

<?php
ini_set('max_execution_time', 9999999);
ini_set('memory_limit', '16384M');
/**
 * @file
 * Functions to export to filesystem.
 */

use Symfony\Component\HttpFoundation\Response;
use Drupal\user\Entity\User;
use Box\Spout\Writer\Common\Creator\WriterEntityFactory;
use Box\Spout\Common\Entity\Row;

// Announce what we're doing.
\Drupal::logger('vp_api')->notice('Begin Export Script...');

// Run the export and save.
_export_spout();

/**
 * Generate the Dyamic Query based on GET variables.
 */
function _vp_api_generate_xls_query() {

  // Connect to the database.
  $db = \Drupal::database();
  $db->query("SET SESSION sql_mode = ''")->execute();

  // Query node data.
  $query = $db->select('node_field_data', 'node');
  $query->fields('node', ['nid', 'type', 'status', 'title', 'uid', 'created']);
  $query->condition('node.type', 'vp_type_rate', '=');

  // Join Firm, Filing, Individual, Case to Rate.
  $query->join('node__field_vp_rate_firm', 'firm', 'node.nid = firm.entity_id');
  $query->join('node__field_vp_rate_company', 'company', 'node.nid = company.entity_id');
  $query->join('node__field_vp_rate_individual', 'individual', 'node.nid = individual.entity_id');
  $query->join('node__field_vp_rate_filing', 'filing', 'node.nid = filing.entity_id');
  $query->join('node__field_vp_filing_case', 'filing_case', 'filing_case.entity_id = filing.field_vp_rate_filing_target_id');

  // Joins for fields to query upon.
  $query->leftjoin('node__field_vp_rate_position', 'position', 'node.nid = position.entity_id');
  $query->leftjoin('node__field_vp_case_nature_of_suit', 'nature_of_suit', 'nature_of_suit.entity_id = filing_case.field_vp_filing_case_target_id');
  $query->leftjoin('node__field_vp_company_industry', 'industry', 'industry.entity_id = company.field_vp_rate_company_target_id');

  // Individual Joins.
  $query->leftjoin('node__field_vp_individual_location', 'location', 'location.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_first_name', 'fname', 'fname.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_middle_name', 'mname', 'mname.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_last_name', 'lname', 'lname.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_bar_date', 'bar_year', 'bar_year.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_state_bar', 'bar_state', 'bar_state.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_practice_area_1', 'pa1', 'pa1.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_practice_area_2', 'pa2', 'pa2.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_practice_area_3', 'pa3', 'pa3.entity_id = individual.field_vp_rate_individual_target_id');
  $query->leftjoin('node__field_vp_graduation', 'grad_year', 'grad_year.entity_id = individual.field_vp_rate_individual_target_id');

  // Rate values.
  $query->leftjoin('node__field_vp_rate_standard', 'standard', 'node.nid = standard.entity_id');
  $query->leftjoin('node__field_vp_rate_hourly', 'actual', 'node.nid = actual.entity_id');
  $query->leftjoin('node__field_vp_rate_total', 'rate_total', 'node.nid = rate_total.entity_id');
  $query->leftjoin('node__field_vp_rate_flat_fee', 'flat_fee', 'node.nid = flat_fee.entity_id');
  $query->leftjoin('node__field_vp_rate_primaryfee_calc', 'primary_fee', 'node.nid = primary_fee.entity_id');
  $query->leftjoin('node__field_vp_rate_hours', 'hours', 'node.nid = hours.entity_id');
  $query->leftjoin('node__field_vp_rate_retainer', 'retainer', 'node.nid = retainer.entity_id');
  $query->leftjoin('node__field_vp_rate_transaction_amount', 'transaction_amount', 'node.nid = transaction_amount.entity_id');
  $query->leftjoin('node__field_vp_rate_transactional_fee', 'transaction_fee', 'node.nid = transaction_fee.entity_id');
  $query->leftjoin('node__field_vp_rate_transaction_type', 'transaction_type', 'node.nid = transaction_type.entity_id');
  $query->leftjoin('node__field_vp_filing_year', 'year', 'year.entity_id = filing.field_vp_rate_filing_target_id');

  // Filing, Case, Company, Individual, and Firm fields.
  $query->fields('firm', ['field_vp_rate_firm_target_id']);
  $query->fields('filing', ['field_vp_rate_filing_target_id']);
  $query->fields('filing_case', ['field_vp_filing_case_target_id']);
  $query->fields('company', ['field_vp_rate_company_target_id']);
  $query->fields('individual', ['field_vp_rate_individual_target_id']);

  // Individual Fields.
  $query->fields('fname', ['field_vp_first_name_value']);
  $query->fields('mname', ['field_vp_middle_name_value']);
  $query->fields('lname', ['field_vp_last_name_value']);
  $query->fields('location', ['field_vp_individual_location_target_id']);
  $query->fields('pa1', ['field_vp_practice_area_1_target_id']);
  $query->fields('pa2', ['field_vp_practice_area_2_target_id']);
  $query->fields('pa3', ['field_vp_practice_area_3_target_id']);
  $query->fields('position', ['field_vp_rate_position_target_id']);
  $query->fields('bar_year', ['field_vp_bar_date_value']);
  $query->fields('bar_state', ['field_vp_state_bar_target_id']);
  $query->fields('grad_year', ['field_vp_graduation_value']);

  // Fee fields.
  $query->fields('standard', ['field_vp_rate_standard_value']);
  $query->fields('actual', ['field_vp_rate_hourly_value']);
  $query->fields('rate_total', ['field_vp_rate_total_value']);
  $query->fields('flat_fee', ['field_vp_rate_flat_fee_value']);
  $query->fields('primary_fee', ['field_vp_rate_primaryfee_calc_value']);
  $query->fields('retainer', ['field_vp_rate_retainer_value']);
  $query->fields('hours', ['field_vp_rate_hours_value']);
  $query->fields('transaction_amount', ['field_vp_rate_transaction_amount_value']);
  $query->fields('transaction_fee', ['field_vp_rate_transactional_fee_value']);
  $query->fields('transaction_type', ['field_vp_rate_transaction_type_target_id']);
  $query->fields('year', ['field_vp_filing_year_value']);

  // Case/Filing Fields.
  $query->fields('nature_of_suit', ['field_vp_case_nature_of_suit_target_id']);
  $query->fields('industry', ['field_vp_company_industry_target_id']);

  // No limit for full download.
  $query->range(0, 10000);

  // Order by Transaction Amount Rate.
  $query->orderBy('primary_fee.field_vp_rate_primaryfee_calc_value', 'DESC')->orderBy('lname.field_vp_last_name_value', 'ASC');

  return $query->execute()->fetchAll();

}

  /**
   * Export a report using Box\Sprout.
   */

  function _export_spout() {

    $response = new Response();
    $response->headers->set('Pragma', 'no-cache');
    $response->headers->set('Expires', '0');
    $response->headers->set('Content-Type', 'application/vnd.ms-excel');
    $response->headers->set('Content-Disposition', "attachment; filename=Valeo_Full_Report.xlsx");

    $writer = WriterEntityFactory::createXLSXWriter();
    // $writer = WriterEntityFactory::createODSWriter();
    // $writer = WriterEntityFactory::createCSVWriter();

    // Make sure 'reports' subdirectory exists.
    $path = 'private://reports';
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);

    // Get real path to private directory.
    $private = \Drupal::service('file_system')->realpath("private://");

    // Delete the previous xlsx export.
    if (file_exists($private . '/reports/Valeo_Full_Report.xlsx')) {
      file_unmanaged_delete($private . '/reports/Valeo_Full_Report.xlsx');
    }

    $writer->openToFile($private . '/reports/Valeo_Full_Report.xlsx'); // write data to a file or to a PHP stream

    $header = [
      WriterEntityFactory::createCell('Last Name'),
      WriterEntityFactory::createCell('Middle Name'),
      WriterEntityFactory::createCell('First Name'),
      WriterEntityFactory::createCell('Firm'),
      WriterEntityFactory::createCell('Position'),
      WriterEntityFactory::createCell('Client Represented'),
      WriterEntityFactory::createCell('Industry'),
      WriterEntityFactory::createCell('Practice Area 1'),
      WriterEntityFactory::createCell('Practice Area 2'),
      WriterEntityFactory::createCell('Practice Area 3'),
      WriterEntityFactory::createCell('Grad Year'),
      WriterEntityFactory::createCell('Bar Year'),
      WriterEntityFactory::createCell('Bar State'),
      WriterEntityFactory::createCell('City'),
      WriterEntityFactory::createCell('Actual Rate'),
      WriterEntityFactory::createCell('Standard Rate'),
      WriterEntityFactory::createCell('Hours'),
      WriterEntityFactory::createCell('Total'),
      WriterEntityFactory::createCell('Flat Fee'),
      WriterEntityFactory::createCell('Retainer Fee'),
      WriterEntityFactory::createCell('Transaction Amount'),
      WriterEntityFactory::createCell('Transactional Fee'),
      WriterEntityFactory::createCell('Transaction Type'),
      WriterEntityFactory::createCell('Case Name'),
      WriterEntityFactory::createCell('Case Number'),
      WriterEntityFactory::createCell('Court'),
      WriterEntityFactory::createCell('Date Filed'),
      WriterEntityFactory::createCell('Nature of Suit'),
      WriterEntityFactory::createCell('Filing Name'),
      WriterEntityFactory::createCell('Filing Description'),
      WriterEntityFactory::createCell('Filing Number'),
      WriterEntityFactory::createCell('Fee Date Range Begin'),
      WriterEntityFactory::createCell('Fee Date Range End'),
      WriterEntityFactory::createCell('Status'),
      WriterEntityFactory::createCell('By'),
      WriterEntityFactory::createCell('On'),
    ];

    // Header Row.
    $header_row = WriterEntityFactory::createRow($header);
    $writer->addRow($header_row);

    // Execute data query.
    $query = _vp_api_generate_xls_query();
    // How many records.
    $total = count($query);
    \Drupal::logger('vp_api')->notice( $total . ' total records in export. Generating spreadsheet.');

    // Generate spreadsheet rows from query results.
    foreach ($query as $result) {

      $row = [
        // Last Name.
        WriterEntityFactory::createCell($result->field_vp_last_name_value),
        // Middle Name.
        WriterEntityFactory::createCell('' . $result->field_vp_first_name_value),
        // First Name.
        WriterEntityFactory::createCell($result->field_vp_middle_name_value),
        // Firm.
        WriterEntityFactory::createCell(getNodeTitle($result->field_vp_rate_firm_target_id)),
        // Position.
        WriterEntityFactory::createCell(getTermName($result->field_vp_rate_position_target_id)),
        // Client Name.
        WriterEntityFactory::createCell(getNodeTitle($result->field_vp_rate_company_target_id)),
        // Industry.
        WriterEntityFactory::createCell(getTermName($result->field_vp_company_industry_target_id)),
        // Practice Area 1.
        WriterEntityFactory::createCell(getTermName($result->field_vp_practice_area_1_target_id)),
        // Practice Area 2.
        WriterEntityFactory::createCell(getTermName($result->field_vp_practice_area_2_target_id)),
        // Practice Area 3.
        WriterEntityFactory::createCell(getTermName($result->field_vp_practice_area_3_target_id)),
        // Grad Year.
        WriterEntityFactory::createCell($result->field_vp_graduation_value),
        // Bar Year.
        WriterEntityFactory::createCell($result->field_vp_bar_date_value),
        // Bar State.
        WriterEntityFactory::createCell(getTermName($result->field_vp_state_bar_target_id)),
        // City.
        WriterEntityFactory::createCell(getTermName($result->field_vp_individual_location_target_id)),
        // Actual Rate.
        WriterEntityFactory::createCell((double) $result->field_vp_rate_hourly_value),
        // $spreadsheet->getActiveSheet()->getStyle('O' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
        // Standard Rate.
        WriterEntityFactory::createCell($result->field_vp_rate_standard_value),
        // $spreadsheet->getActiveSheet()->getStyle('P' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
        // Hours.
        WriterEntityFactory::createCell($result->field_vp_rate_hours_value),
        // Total.
        WriterEntityFactory::createCell($result->field_vp_rate_total_value),
        // $spreadsheet->getActiveSheet()->getStyle('R' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
        // Flat Fee.
        WriterEntityFactory::createCell($result->field_vp_rate_flat_fee_value),
        // $spreadsheet->getActiveSheet()->getStyle('S' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
        // Retainer Fee.
        WriterEntityFactory::createCell($result->field_vp_rate_retainer_value),
        // $spreadsheet->getActiveSheet()->getStyle('T' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
        // Transaction Amount.
        WriterEntityFactory::createCell($result->field_vp_rate_transaction_amount_value),
        // $spreadsheet->getActiveSheet()->getStyle('U' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
        // Transactional Fee.
        WriterEntityFactory::createCell($result->field_vp_rate_transactional_fee_value),
        // $spreadsheet->getActiveSheet()->getStyle('V' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
        // Transaction Type.
        WriterEntityFactory::createCell(getTermName($result->field_vp_rate_transaction_type_target_id)),
        // Case Name.
        WriterEntityFactory::createCell(getNodeTitle($result->field_vp_filing_case_target_id)),
        // Case Number.
        WriterEntityFactory::createCell(getCaseNumber($result->field_vp_filing_case_target_id)),
        // Court.
        WriterEntityFactory::createCell(getCaseCourt($result->field_vp_filing_case_target_id)),
        // Date Filed.
        WriterEntityFactory::createCell(getFilingDate($result->field_vp_filing_case_target_id)),
        // $spreadsheet->getActiveSheet()->getStyle('AA' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
        // Nature of Suit.
        WriterEntityFactory::createCell(getNatureOfSuit($result->field_vp_filing_case_target_id)),
        // Filing Name.
        WriterEntityFactory::createCell(getNodeTitle($result->field_vp_rate_filing_target_id)),
        // Filing Description.
        WriterEntityFactory::createCell(getFilingDescription($result->field_vp_rate_filing_target_id)),
        // Filing Number.
        WriterEntityFactory::createCell(getFilingNumber($result->field_vp_rate_filing_target_id)),
        // Fee Date Range Begin.
        WriterEntityFactory::createCell(getFeeDateBegin($result->field_vp_rate_filing_target_id)),
        // $spreadsheet->getActiveSheet()->getStyle('AF' . $i)->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
        // Fee Date Range End.
        WriterEntityFactory::createCell(getFeeDateEnd($result->field_vp_rate_filing_target_id)),
        // Rate status.
        WriterEntityFactory::createCell($result->status ? 'Published' : 'Unpublished'),
        // Posted By.
        WriterEntityFactory::createCell(getUserName($result->uid)),
        // Posted Date.
        WriterEntityFactory::createCell(format_date($result->created, 'custom', 'Y-m-d')),
      ];
      $data = WriterEntityFactory::createRow($row);
      $writer->addRow($data);

    }

    $writer->close();
    \Drupal::logger('vp_api')->notice('Spreadsheet saved to '. $private . '/reports/Valeo_Full_Report.xlsx');


    $response->setContent(NULL);
    return $response;
  }

  /**
   * Get Fiiling Number Query.
   */
  function getFilingNumber($id) {
    $query = db_select('node__field_vp_filing_number', 'number');
    $query->condition('number.entity_id', $id, '=');
    $query->fields('number', ['field_vp_filing_number_value']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Fiiling Description Query.
   */
  function getFilingDescription($id) {
    $query = db_select('node__field_vp_filing_description', 'description');
    $query->condition('description.entity_id', $id, '=');
    $query->fields('description', ['field_vp_filing_description_value']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Case Number Query.
   */
  function getCaseNumber($id) {
    $query = db_select('node__field_vp_case_number', 'case_number');
    $query->condition('case_number.entity_id', $id, '=');
    $query->fields('case_number', ['field_vp_case_number_value']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Case Court Query.
   */
  function getCaseCourt($id) {
    $query = db_select('node__field_vp_case_court', 'case_court');
    $query->join('taxonomy_term_field_data', 'term', 'case_court.field_vp_case_court_target_id = term.tid');
    $query->condition('case_court.entity_id', $id, '=');
    $query->fields('term', ['name']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Nature Of Suit Query.
   */
  function getNatureOfSuit($id) {
    $query = db_select('node__field_vp_case_nature_of_suit', 'suit');
    $query->join('taxonomy_term_field_data', 'term', 'suit.field_vp_case_nature_of_suit_target_id = term.tid');
    $query->condition('suit.entity_id', $id, '=');
    $query->fields('term', ['name']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Date Filed Query.
   */
  function getFilingDate($id) {
    $query = db_select('node__field_vp_case_date_filed', 'date_filed');
    $query->condition('date_filed.entity_id', $id, '=');
    $query->fields('date_filed', ['field_vp_case_date_filed_value']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Fee Date Begin Query.
   */
  function getFeeDateBegin($id) {
    $query = db_select('node__field_vp_filing_fee_dates', 'date_begin');
    $query->condition('date_begin.entity_id', $id, '=');
    $query->fields('date_begin', ['field_vp_filing_fee_dates_value']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Fee Date End Query.
   */
  function getFeeDateEnd($id) {
    $query = db_select('node__field_vp_filing_fee_dates', 'date_end');
    $query->condition('date_end.entity_id', $id, '=');
    $query->fields('date_end', ['field_vp_filing_fee_dates_end_value']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Node Title Query.
   */
  function getNodeTitle($id) {
    $query = db_select('node_field_data', 'node');
    $query->condition('node.nid', $id, '=');
    $query->fields('node', ['title']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Term Name Query.
   */
  function getTermName($id) {
    $query = db_select('taxonomy_term_field_data', 'term');
    $query->condition('term.tid', $id, '=');
    $query->fields('term', ['name']);
    return $query->execute()->fetchField();
  }

  /**
   * Get Term Parent IDs.
   */
  function getTermParentIds($ids) {
    // Create an array for the child term ids.
    $childTerms = [];

    // For each term_node_tid_depth get the children and
    // add them to the child terms array.
    foreach ($ids as $tid) {
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadChildren($tid);
      foreach ($terms as $term) {
        $childTerms[] = $term->get('tid')->value;
      }
    }
    return $childTerms;
  }

  /**
   * Get the title of the current page.
   */
  function getPageTitle() {
    $request = \Drupal::request();
    if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
      $title = \Drupal::service('title_resolver')->getTitle($request, $route);
    }
    //return $title;
    return "Valeo Rates Report";
  }

  /**
   * Get the username of the id.
   */
  function getUserName($uid) {
    $account = User::load($uid); // pass your uid
    $name = $account->getUsername();
    return $name;
  }
