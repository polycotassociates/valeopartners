diff --git a/composer.json b/composer.json
old mode 100644
new mode 100755
index 3d15944..d7c279a
--- a/composer.json
+++ b/composer.json
@@ -18,5 +18,12 @@
     "drupal/webform": "~5.0",
     "drupal/block_field": "~1.0",
     "drupal/dynamic_entity_reference": "~1.0"
+  },
+  "extra": {
+    "drush": {
+      "services": {
+        "drush.services.yml": "^9"
+      }
+    }
   }
 }
diff --git a/drush.services.yml b/drush.services.yml
new file mode 100755
index 0000000..91ce779
--- /dev/null
+++ b/drush.services.yml
@@ -0,0 +1,6 @@
+services:
+  entity_usage.commands:
+    class: \Drupal\entity_usage\Commands\EntityUsageCommands
+    arguments: ['@entity_usage.batch_manager']
+    tags:
+      - { name: drush.command }
diff --git a/entity_usage.drush.inc b/entity_usage.drush.inc
new file mode 100755
index 0000000..a587ea6
--- /dev/null
+++ b/entity_usage.drush.inc
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * @file
+ * Defines drush commands for the Entity Usage module.
+ */
+
+/**
+ * Implements hook_drush_command().
+ */
+function entity_usage_drush_command() {
+  $items = [];
+
+  $items['entity-usage-recreate'] = [
+    'description' => 'Recreate all entity usage statistics.',
+    'aliases' => ['eu-r'],
+  ];
+
+  return $items;
+}
+
+/**
+ * Command callback for 'entity-usage-recreate'.
+ */
+function drush_entity_usage_recreate() {
+  \Drupal::service('entity_usage.batch_manager')->recreate();
+  drush_backend_batch_process();
+}
diff --git a/entity_usage.services.yml b/entity_usage.services.yml
old mode 100644
new mode 100755
index 4245cab..3255cd3
--- a/entity_usage.services.yml
+++ b/entity_usage.services.yml
@@ -8,6 +8,9 @@ services:
   entity_usage.entity_update_manager:
     class: Drupal\entity_usage\EntityUpdateManager
     arguments: ['@entity_usage.usage', '@plugin.manager.entity_usage.track', '@config.factory']
+  entity_usage.batch_manager:
+    class: Drupal\entity_usage\EntityUsageBatchManager
+    arguments: ['@entity_type.manager', '@string_translation', '@config.factory']
   entity_usage.route_subscriber:
     class: Drupal\entity_usage\Routing\RouteSubscriber
     arguments: ['@entity_type.manager', '@config.factory']
diff --git a/src/Commands/EntityUsageCommands.php b/src/Commands/EntityUsageCommands.php
new file mode 100755
index 0000000..8793be7
--- /dev/null
+++ b/src/Commands/EntityUsageCommands.php
@@ -0,0 +1,42 @@
+<?php
+
+namespace Drupal\entity_usage\Commands;
+
+use Drush\Commands\DrushCommands;
+use Drupal\entity_usage\EntityUsageBatchManager;
+
+/**
+ * Entity Usage drush commands.
+ */
+class EntityUsageCommands extends DrushCommands {
+
+  /**
+   * The Entity Usage batch manager.
+   *
+   * @var \Drupal\entity_usage\EntityUsageBatchManager
+   */
+  protected $batchManager;
+
+  /**
+   * Creates a EntityUsageCommands object.
+   *
+   * @param \Drupal\entity_usage\EntityUsageBatchManager $batch_manager
+   *   The entity usage batch manager.
+   */
+  public function __construct(EntityUsageBatchManager $batch_manager) {
+    parent::__construct();
+    $this->batchManager = $batch_manager;
+  }
+
+  /**
+   * Recreate all entity usage statistics.
+   *
+   * @command entity:usage-recreate
+   * @aliases eu-r,entity-usage-recreate
+   */
+  public function recreate() {
+    $this->batchManager->recreate();
+    drush_backend_batch_process();
+  }
+
+}
diff --git a/src/EntityUsageBatchManager.php b/src/EntityUsageBatchManager.php
new file mode 100755
index 0000000..b555790
--- /dev/null
+++ b/src/EntityUsageBatchManager.php
@@ -0,0 +1,218 @@
+<?php
+
+namespace Drupal\entity_usage;
+
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\Core\StringTranslation\TranslationInterface;
+
+/**
+ * Manages Entity Usage integration with Batch API.
+ */
+class EntityUsageBatchManager implements ContainerInjectionInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The entity usage configuration.
+   *
+   * @var \Drupal\Core\Config\Config
+   */
+  protected $config;
+
+  /**
+   * Creates a EntityUsageBatchManager object.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager service.
+   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   *   The string translation service.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   The 'aggregator.settings' config.
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, ConfigFactoryInterface $config_factory) {
+    $this->entityTypeManager = $entity_type_manager;
+    $this->stringTranslation = $string_translation;
+    $this->config = $config_factory->get('entity_usage.settings');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('entity_type.manager'),
+      $container->get('string_translation'),
+      $container->get('config.factory')
+    );
+  }
+
+  /**
+   * Recreate the entity usage statistics.
+   *
+   * Generate a batch to recreate the statistics for all entities.
+   * Note that if we force all statistics to be created, there is no need to
+   * separate them between source / target cases. If all entities are
+   * going to be re-tracked, tracking all of them as source is enough, because
+   * there could never be a target without a source.
+   */
+  public function recreate() {
+    $batch = $this->generateBatch();
+    batch_set($batch);
+  }
+
+  /**
+   * Create a batch to process the entity types in bulk.
+   *
+   * @return array
+   *   The batch array.
+   */
+  public function generateBatch() {
+    $operations = [];
+    $to_track = $to_track = $this->config->get('track_enabled_source_entity_types');
+    foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
+      // Only look for entities enabled for tracking on the settings form.
+      $track_this_entity_type = FALSE;
+      if (!is_array($to_track) && ($entity_type->entityClassImplements('\Drupal\Core\Entity\ContentEntityInterface'))) {
+        // When no settings are defined, track all content entities by default,
+        // except for Files and Users.
+        if (!in_array($entity_type_id, ['file', 'user'])) {
+          $track_this_entity_type = TRUE;
+        }
+      }
+      elseif (is_array($to_track) && in_array($entity_type_id, $to_track, TRUE)) {
+        $track_this_entity_type = TRUE;
+      }
+      if ($track_this_entity_type) {
+        $operations[] = ['\Drupal\entity_usage\EntityUsageBatchManager::updateSourcesBatchWorker', [$entity_type_id]];
+      }
+    }
+
+    $batch = [
+      'operations' => $operations,
+      'finished' => '\Drupal\entity_usage\EntityUsageBatchManager::batchFinished',
+      'title' => $this->t('Updating entity usage statistics.'),
+      'progress_message' => $this->t('Processed @current of @total entity types.'),
+      'error_message' => $this->t('This batch encountered an error.'),
+    ];
+
+    return $batch;
+  }
+
+  /**
+   * Batch operation worker for recreating statistics for source entities.
+   *
+   * @param string $entity_type_id
+   *   The entity type id, for example 'node'.
+   * @param mixed $context
+   *   Batch context.
+   */
+  public static function updateSourcesBatchWorker($entity_type_id, &$context) {
+    $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
+    $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
+    $entity_type_key = $entity_type->getKey('id');
+
+    if (empty($context['sandbox']['total'])) {
+      // Delete current usage statistics for these entities.
+      \Drupal::service('entity_usage.usage')->bulkDeleteSources($entity_type_id);
+
+      $context['sandbox']['progress'] = 0;
+      $context['sandbox']['current_id'] = -1;
+      $context['sandbox']['total'] = (int) $entity_storage->getQuery()
+        ->accessCheck(FALSE)
+        ->count()
+        ->execute();
+    }
+
+    $entity_ids = $entity_storage->getQuery()
+      ->condition($entity_type_key, $context['sandbox']['current_id'], '>')
+      ->range(0, 1)
+      ->accessCheck(FALSE)
+      ->sort($entity_type_key)
+      ->execute();
+
+    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    $entity = $entity_storage->load(reset($entity_ids));
+    if ($entity) {
+      if ($entity->getEntityType()->isRevisionable()) {
+        // Track all revisions and translations of the source entity. Sources
+        // are tracked as if they were new entities.
+        $result = $entity_storage->getQuery()->allRevisions()
+          ->condition($entity->getEntityType()->getKey('id'), $entity->id())
+          ->sort($entity->getEntityType()->getKey('revision'), 'DESC')
+          ->execute();
+        $revision_ids = array_keys($result);
+
+        foreach ($revision_ids as $revision_id) {
+          /** @var \Drupal\Core\Entity\EntityInterface $entity_revision */
+          if (!$entity_revision = $entity_storage->loadRevision($revision_id)) {
+            continue;
+          }
+
+          \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity_revision);
+        }
+      }
+      else {
+        // Sources are tracked as if they were new entities.
+        \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity);
+      }
+
+      $context['sandbox']['progress']++;
+      $context['sandbox']['current_id'] = $entity->id();
+      $context['results'][] = $entity_type_id . ':' . $entity->id();
+    }
+
+    if ($context['sandbox']['progress'] < $context['sandbox']['total']) {
+      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['total'];
+    }
+    else {
+      $context['finished'] = 1;
+    }
+
+    $context['message'] = t('Updating entity usage for @entity_type: @current of @total', [
+      '@entity_type' => $entity_type_id,
+      '@current' => $context['sandbox']['progress'],
+      '@total' => $context['sandbox']['total'],
+    ]);
+  }
+
+  /**
+   * Finish callback for our batch processing.
+   *
+   * @param bool $success
+   *   Whether the batch completed successfully.
+   * @param array $results
+   *   The results array.
+   * @param array $operations
+   *   The operations array.
+   */
+  public static function batchFinished($success, array $results, array $operations) {
+    if ($success) {
+      \Drupal::messenger()->addMessage(t('Recreated entity usage for @count entities.', ['@count' => count($results)]));
+    }
+    else {
+      // An error occurred.
+      // $operations contains the operations that remained unprocessed.
+      $error_operation = reset($operations);
+      \Drupal::messenger()->addMessage(
+        t('An error occurred while processing @operation with arguments : @args',
+          [
+            '@operation' => $error_operation[0],
+            '@args' => print_r($error_operation[0], TRUE),
+          ]
+        )
+      );
+    }
+  }
+
+}
diff --git a/src/Form/BatchUpdateForm.php b/src/Form/BatchUpdateForm.php
old mode 100644
new mode 100755
index aef3c96..65596e1
--- a/src/Form/BatchUpdateForm.php
+++ b/src/Form/BatchUpdateForm.php
@@ -2,7 +2,7 @@

 namespace Drupal\entity_usage\Form;

-use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_usage\EntityUsageBatchManager;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -13,20 +13,20 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class BatchUpdateForm extends FormBase {

   /**
-   * The EntityTypeManager service.
+   * The EntityUsageBatchManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var \Drupal\entity_usage\EntityUsageBatchManager
    */
-  protected $entityTypeManager;
+  protected $batchManager;

   /**
    * BatchUpdateForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
-   *   The EntityTypeManager service.
+   * @param \Drupal\entity_usage\EntityUsageBatchManager $batch_manager
+   *   The entity usage batch manager.
    */
-  public function __construct(EntityTypeManagerInterface $entity_manager) {
-    $this->entityTypeManager = $entity_manager;
+  public function __construct(EntityUsageBatchManager $batch_manager) {
+    $this->batchManager = $batch_manager;
   }

   /**
@@ -34,7 +34,7 @@ class BatchUpdateForm extends FormBase {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get('entity_type.manager')
+      $container->get('entity_usage.batch_manager')
     );
   }

@@ -66,157 +66,7 @@ class BatchUpdateForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    // Generate a batch to recreate the statistics for all entities.
-    // Note that if we force all statistics to be created, there is no need to
-    // separate them between source / target cases. If all entities are
-    // going to be re-tracked, tracking all of them as source is enough, because
-    // there could never be a target without a source.
-    $batch = $this->generateBatch();
-    batch_set($batch);
-  }
-
-  /**
-   * Create a batch to process the entity types in bulk.
-   *
-   * @return array
-   *   The batch array.
-   */
-  public function generateBatch() {
-    $operations = [];
-    $to_track = \Drupal::config('entity_usage.settings')->get('track_enabled_source_entity_types');
-    foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
-      // Only look for entities enabled for tracking on the settings form.
-      $track_this_entity_type = FALSE;
-      if (!is_array($to_track) && ($entity_type->entityClassImplements('\Drupal\Core\Entity\ContentEntityInterface'))) {
-        // When no settings are defined, track all content entities by default,
-        // except for Files and Users.
-        if (!in_array($entity_type_id, ['file', 'user'])) {
-          $track_this_entity_type = TRUE;
-        }
-      }
-      elseif (is_array($to_track) && in_array($entity_type_id, $to_track, TRUE)) {
-        $track_this_entity_type = TRUE;
-      }
-      if ($track_this_entity_type) {
-        $operations[] = ['Drupal\entity_usage\Form\BatchUpdateForm::updateSourcesBatchWorker', [$entity_type_id]];
-      }
-    }
-
-    $batch = [
-      'operations' => $operations,
-      'finished' => 'Drupal\entity_usage\Form\BatchUpdateForm::batchFinished',
-      'title' => $this->t('Updating entity usage statistics.'),
-      'progress_message' => $this->t('Processed @current of @total entity types.'),
-      'error_message' => $this->t('This batch encountered an error.'),
-    ];
-
-    return $batch;
-  }
-
-  /**
-   * Batch operation worker for recreating statistics for source entities.
-   *
-   * @param string $entity_type_id
-   *   The entity type id, for example 'node'.
-   * @param array $context
-   *   The context array.
-   */
-  public static function updateSourcesBatchWorker($entity_type_id, array &$context) {
-    $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
-    $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
-    $entity_type_key = $entity_type->getKey('id');
-
-    if (empty($context['sandbox']['total'])) {
-      // Delete current usage statistics for these entities.
-      \Drupal::service('entity_usage.usage')->bulkDeleteSources($entity_type_id);
-
-      $context['sandbox']['progress'] = 0;
-      $context['sandbox']['current_id'] = -1;
-      $context['sandbox']['total'] = (int) $entity_storage->getQuery()
-        ->accessCheck(FALSE)
-        ->count()
-        ->execute();
-    }
-
-    $entity_ids = $entity_storage->getQuery()
-      ->condition($entity_type_key, $context['sandbox']['current_id'], '>')
-      ->range(0, 1)
-      ->accessCheck(FALSE)
-      ->sort($entity_type_key)
-      ->execute();
-
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
-    $entity = $entity_storage->load(reset($entity_ids));
-    if ($entity) {
-      if ($entity->getEntityType()->isRevisionable()) {
-        // Track all revisions and translations of the source entity. Sources
-        // are tracked as if they were new entities.
-        $result = $entity_storage->getQuery()->allRevisions()
-          ->condition($entity->getEntityType()->getKey('id'), $entity->id())
-          ->sort($entity->getEntityType()->getKey('revision'), 'DESC')
-          ->execute();
-        $revision_ids = array_keys($result);
-
-        foreach ($revision_ids as $revision_id) {
-          /** @var \Drupal\Core\Entity\EntityInterface $entity_revision */
-          if (!$entity_revision = $entity_storage->loadRevision($revision_id)) {
-            continue;
-          }
-
-          \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity_revision);
-        }
-      }
-      else {
-        // Sources are tracked as if they were new entities.
-        \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity);
-      }
-
-      $context['sandbox']['progress']++;
-      $context['sandbox']['current_id'] = $entity->id();
-      $context['results'][] = $entity_type_id . ':' . $entity->id();
-    }
-
-    if ($context['sandbox']['progress'] < $context['sandbox']['total']) {
-      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['total'];
-    }
-    else {
-      $context['finished'] = 1;
-    }
-
-    $context['message'] = t('Updating entity usage for @entity_type: @current of @total', [
-      '@entity_type' => $entity_type_id,
-      '@current' => $context['sandbox']['progress'],
-      '@total' => $context['sandbox']['total'],
-    ]);
-  }
-
-  /**
-   * Finish callback for our batch processing.
-   *
-   * @param bool $success
-   *   Whether the batch completed successfully.
-   * @param array $results
-   *   The results array.
-   * @param array $operations
-   *   The operations array.
-   */
-  public static function batchFinished($success, array $results, array $operations) {
-    if ($success) {
-      drupal_set_message(t('Recreated entity usage for @count entities.', ['@count' => count($results)]));
-    }
-    else {
-      // An error occurred.
-      // $operations contains the operations that remained unprocessed.
-      $error_operation = reset($operations);
-      drupal_set_message(
-        t('An error occurred while processing @operation with arguments : @args',
-          [
-            '@operation' => $error_operation[0],
-            '@args' => print_r($error_operation[0], TRUE),
-          ]
-        )
-      );
-    }
+    $this->batchManager->recreate();
   }

 }