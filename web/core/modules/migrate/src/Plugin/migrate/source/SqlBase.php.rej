--- modules/migrate/src/Plugin/migrate/source/SqlBase.php
+++ modules/migrate/src/Plugin/migrate/source/SqlBase.php
@@ -2,12 +2,15 @@
 
 namespace Drupal\migrate\Plugin\migrate\source;
 
+use Drupal\Core\Database\ConnectionNotDefinedException;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\State\StateInterface;
+use Drupal\migrate\Exception\RequirementsException;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate\Plugin\migrate\id_map\Sql;
 use Drupal\migrate\Plugin\MigrateIdMapInterface;
+use Drupal\migrate\Plugin\RequirementsInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -19,7 +22,7 @@
  * is present, it is used as a database connection information array to define
  * the connection.
  */
-abstract class SqlBase extends SourcePluginBase implements ContainerFactoryPluginInterface {
+abstract class SqlBase extends SourcePluginBase implements ContainerFactoryPluginInterface, RequirementsInterface {
 
   /**
    * The query string.
@@ -81,16 +84,17 @@ public function __toString() {
    */
   public function getDatabase() {
     if (!isset($this->database)) {
-      // See if the database info is in state - if not, fallback to
-      // configuration.
+      // Look first for an explicit state key containing the configuration.
       if (isset($this->configuration['database_state_key'])) {
         $this->database = $this->setUpDatabase($this->state->get($this->configuration['database_state_key']));
       }
-      elseif (($fallback_state_key = $this->state->get('migrate.fallback_state_key'))) {
-        $this->database = $this->setUpDatabase($this->state->get($fallback_state_key));
+      // Next, use explicit configuration in the source plugin.
+      elseif (!($fallback_state_key = $this->state->get('migrate.fallback_state_key'))) {
+        $this->database = $this->setUpDatabase($this->configuration);
       }
+      // Otherwise, fallback to the global state key.
       else {
-        $this->database = $this->setUpDatabase($this->configuration);
+        $this->database = $this->setUpDatabase($this->state->get($fallback_state_key));
       }
     }
     return $this->database;
@@ -110,12 +114,17 @@ public function getDatabase() {
    *
    * @return \Drupal\Core\Database\Connection
    *   The connection to use for this plugin's queries.
+   *
+   * @throws \Drupal\migrate\Exception\RequirementsException
+   *   Thrown if there is no properly-configured database.
    */
   protected function setUpDatabase(array $database_info) {
     if (isset($database_info['key'])) {
       $key = $database_info['key'];
     }
     else {
+      // If there is no explicit database configuration at all, fallback to a
+      // connection named 'migrate'.
       $key = 'migrate';
     }
     if (isset($database_info['target'])) {
@@ -127,7 +136,29 @@ protected function setUpDatabase(array $database_info) {
     if (isset($database_info['database'])) {
       Database::addConnectionInfo($key, $target, $database_info['database']);
     }
-    return Database::getConnection($target, $key);
+    try {
+      $connection = Database::getConnection($target, $key);
+    }
+    catch (ConnectionNotDefinedException $e) {
+      // If we fell back to the magic 'migrate' connection and it doesn't exist,
+      // treat the lack of the connection as a RequirementsException.
+      if ($key == 'migrate') {
+        throw new RequirementsException("No database connection configured for source plugin " . $this->pluginId);
+      }
+      else {
+        throw $e;
+      }
+    }
+    return $connection;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function checkRequirements() {
+    if ($this->pluginDefinition['requirements_met'] === TRUE) {
+      $this->getDatabase();
+    }
   }
 
   /**
